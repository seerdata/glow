{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/events/events.js","src/config.coffee","src/crypto_storage.coffee","src/keyratchet.coffee","src/keyring.coffee","src/keys.coffee","src/mailbox.coffee","src/main.coffee","src/mixins.coffee","src/nacl.coffee","src/rachetbox.coffee","src/relay.coffee","src/test_driver.coffee","src/utils.coffee"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"theglow.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Constants that define behavior for the glow library\nclass Config\n  @_NONCE_TAG:  '__nc'\n  @_SKEY_TAG:   'storage_key'\n  @_DEF_ROOT:   '.v1.stor.vlt12'\n\n  @RELAY_TOKEN_LEN: 32 # Relay tokens, keys and hashes are 32 bytes\n\n  # 5 min - Matched with config.x.relay.token_timeout\n  @RELAY_TOKEN_TIMEOUT: 5 * 60 * 1000\n\n  # 15 min - Matched with config.x.relay.session_timeout\n  @RELAY_SESSION_TIMEOUT: 15 * 60 * 1000\n\n  # 5 sec - Ajax request timeout\n  @RELAY_AJAX_TIMEOUT: 5 * 1000\n\nmodule.exports = Config\n\n# Put all libs into global namespace for console access\n# window.__CRYPTO_DEBUG = true\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig  = require 'config'\nKeys = require 'keys'\nNacl = require 'nacl'\n\n# Secure local storage\nclass CryptoStorage\n  # Keys are tagged in local storage with a versioned prefix\n  tag: (strKey) ->\n    strKey and strKey + @root\n\n  # Changing roots allows different versions to keep separate storage areas\n  constructor: (@storageKey = null, r = null) ->\n    @root = if r then \".#{r}#{Config._DEF_ROOT}\" else Config._DEF_ROOT\n\n    # TODO: move storage key to hw and provide it in ctor call\n    unless @storageKey\n      @_loadKey()\n\n    # If we don't have a loaded storageKey, make a new one\n    unless @storageKey\n      @newKey()\n\n  _saveKey: ->\n    @_set Config._SKEY_TAG, @storageKey.toString()\n\n  _loadKey: ->\n    keyStr = @_get Config._SKEY_TAG\n    @setKey Keys.fromString keyStr if keyStr\n\n  # have to call with overseerAuthorized as true for extra safety\n  selfDestruct: (overseerAuthorized) ->\n    @_localRemove @tag Config._SKEY_TAG if overseerAuthorized\n\n  setKey: (objStorageKey) ->\n    @storageKey = objStorageKey\n    @_saveKey()\n\n  newKey: ->\n    @setKey Nacl.makeSecretKey()\n\n  # main storage functions\n  save: (strTag, data) ->\n    unless strTag and data # nothing to do if either is null\n      return null\n\n    n = Nacl.use()\n    # let's convert the data to JSON, then make that string a byte array\n    data = n.encode_utf8 JSON.stringify data\n\n    # each data field saved generates its own nonce\n    nonce = n.crypto_secretbox_random_nonce()\n    aCText = n.crypto_secretbox(data, nonce, @storageKey.key)\n\n    # save the chipher text and nonce for this save op\n    @_set strTag, aCText.toBase64()\n    @_set \"#{Config._NONCE_TAG}.#{strTag}\", nonce.toBase64()\n    # signal success\n    true\n\n  get: (strTag) ->\n    ct = @_get strTag # get cipher text by storage tag\n    return null unless ct # nothing to do without cipher text\n\n    nonce = @_get \"#{Config._NONCE_TAG}.#{strTag}\"\n    return null unless nonce # nothing to do without nonce\n\n    n = Nacl.use()\n    # covert cipher text to arrays from base64 in local storage\n    aPText = n.crypto_secretbox_open(\n      ct.fromBase64()\n      nonce.fromBase64()\n      @storageKey.key\n    )\n    # restore JSON string from plain text array and parse it\n    JSON.parse n.decode_utf8 aPText\n\n  remove: (strTag) ->\n    for tag in [strTag, \"#{Config._NONCE_TAG}.#{strTag}\"]\n      @_localRemove @tag tag\n    true\n\n  # Private access functions for tagged read/write\n  _get: (strTag) ->\n    @_localGet @tag strTag\n\n  _set: (strTag, strData) ->\n    return null unless strTag and strData\n    @_localSet (@tag strTag), strData\n    strData\n\n  # For testing we can keep the storage key in local storage\n  # Eventually we should move it to the device's user hardware storage\n  # That will fully secure local storage data\n  _localGet: (str) ->\n    @_storage().get(str) or null\n  _localSet: (str, data) ->\n    @_storage().set str, data\n  _localRemove: (str) ->\n    @_storage().remove str\n\n  _storage: () ->\n    if not CryptoStorage._storageDriver\n      CryptoStorage.startStorageSystem()\n    CryptoStorage._storageDriver\n\n  @_storageDriver = null\n\n  @startStorageSystem = (driver) ->\n    if not driver\n      throw new Error 'The driver parameter cannot be empty.'\n    @_storageDriver = driver\n\nmodule.exports = CryptoStorage\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nNacl = require 'nacl'\n\nclass KeyRatchet\n\n  # Last used key, we know other party has it\n  lastKey: null\n\n  # Confirmed key, we know other party just got it\n  confirmedKey: null\n\n  # Next key, we sending it to the other party. We\n  # do not know when/if it will confirm it\n  nextKey: null\n\n  _roles: ['lastKey', 'confirmedKey', 'nextKey']\n\n  constructor: (@id, @keyRing, firstKey = null) ->\n    throw new Error('KeyRatchet - missing params') unless @id and @keyRing\n    for s in @_roles\n      @[s] = @keyRing.getKey(@keyTag s)\n    @startRatchet firstKey if firstKey\n\n  keyTag: (role) ->\n    \"#{role}_#{@id}\"\n\n  storeKey: (role) ->\n    @keyRing.saveKey @keyTag(role), @[role]\n\n  startRatchet: (firstKey) ->\n    # If we dont have confirmed key to work with\n    # we have to start ratched with a default key\n    for k in ['confirmedKey', 'lastKey']\n      unless @[k]\n        @[k] = firstKey\n        @storeKey k\n\n    # create next ratchet key unless we already done so\n    unless @nextKey\n      @nextKey = Nacl.makeKeyPair()\n      @storeKey 'nextKey'\n\n  pushKey: (newKey) ->\n    @lastKey = @confirmedKey\n    @confirmedKey = @nextKey\n    @nextKey = newKey\n    @storeKey(s) for s in @_roles\n\n  confKey: (newConfirmedKey) ->\n    return false if @confirmedKey? and @confirmedKey.equal newConfirmedKey\n    # console.log \"Key confirmed: replacing in #{@id} | #{@confirmedKey.boxPk.toBase64()} with #{newConfirmedKey.boxPk.toBase64()}\"\n    @lastKey = @confirmedKey\n    @confirmedKey = newConfirmedKey\n    @storeKey(s) for s in ['lastKey', 'confirmedKey']\n    return true\n\n  curKey: ->\n    return @confirmedKey if @confirmedKey\n    return @lastKey\n\n  h2LastKey: -> Nacl.h2 @lastKey.boxPk\n  h2ConfirmedKey: -> Nacl.h2 @confirmedKey.boxPk\n  h2NextKey: -> Nacl.h2 @nextKey.boxPk\n\n  keyByHash: (hash) ->\n    for s in @_roles\n      return @[s] if Nacl.h2(@[s].boxPk) is hash\n\n  isNextKeyHash: (hash) ->\n    @h2NextKey().equal hash\n\n  toStr: -> JSON.stringify(@).toBase64()\n  fromStr: (str) -> Utils.extend @, JSON.parse(str.fromBase64())\n\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    for s in @_roles\n      @keyRing.deleteKey @keyTag s\n\nmodule.exports = KeyRatchet\nwindow.KeyRatchet = KeyRatchet if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig        = require 'config'\nCryptoStorage = require 'crypto_storage'\nKeys          = require 'keys'\nNacl          = require 'nacl'\nUtils         = require 'utils'\nEventEmitter  = require('events').EventEmitter\n\n# Manages the public keys of correspondents\nclass KeyRing extends EventEmitter\n  # storage master key arrives from HW storage\n  constructor: (id, strMasterKey = null) ->\n    if strMasterKey\n      key = Keys.fromString strMasterKey\n      @storage = new CryptoStorage(key, id)\n\n    @storage = new CryptoStorage(null, id) unless @storage\n    @_ensureKeys()\n\n  # make sure we have all basic keys created\n  _ensureKeys: ->\n    @_loadCommKey()\n    @_loadGuestKeys()\n\n  _loadCommKey: ->\n    @commKey = @getKey 'comm_key'\n    return if @commKey\n    @commKey = Nacl.makeKeyPair()\n    @saveKey 'comm_key', @commKey\n\n  _loadGuestKeys: ->\n    @registry = @storage.get('guest_registry') or []\n    @guestKeys = {}\n    for r in @registry\n      @guestKeys[r] = @storage.get(\"guest[#{r}]\")\n    @guestKeyTimeouts = {}\n\n  commFromSeed: (seed) ->\n    @commKey = Nacl.fromSeed Nacl.encode_utf8 seed\n    @storage.save('comm_key', @commKey.toString())\n\n  commFromSecKey: (rawSecKey) ->\n    @commKey = Nacl.fromSecretKey rawSecKey\n    @storage.save('comm_key', @commKey.toString())\n\n  tagByHpk: (hpk) ->\n    for own k, v of @guestKeys\n      return k if hpk is Nacl.h2(v.fromBase64()).toBase64()\n\n  getMasterKey: ->\n    @storage.storageKey.key2str 'key' # to b64 string\n\n  getPubCommKey: ->\n    @commKey.strPubKey()\n\n  saveKey: (tag, key) ->\n    @storage.save(tag, key.toString())\n    key\n\n  getKey: (tag) ->\n    k = @storage.get(tag)\n    if k then Keys.fromString k else null\n\n  deleteKey: (tag) ->\n    @storage.remove tag\n\n  _addRegistry: (strGuestTag) ->\n    return null unless strGuestTag\n    @registry.push(strGuestTag) unless @registry.indexOf(strGuestTag) > -1\n\n  _saveNewGuest: (tag, pk) ->\n    return null unless tag and pk\n    @storage.save(\"guest[#{tag}]\", pk)\n    @storage.save('guest_registry', @registry)\n\n  _removeGuestRecord: (tag) ->\n    return null unless tag\n    @storage.remove(\"guest[#{tag}]\")\n    i = @registry.indexOf tag\n    if i > -1\n      @registry.splice(i, 1)\n      @storage.save('guest_registry', @registry)\n\n  addGuest: (strGuestTag, b64_pk) ->\n    return null unless strGuestTag and b64_pk\n    b64_pk = b64_pk.trimLines()\n    @_addRegistry strGuestTag\n    @guestKeys[strGuestTag] = b64_pk\n    @_saveNewGuest(strGuestTag, b64_pk)\n\n  addTempGuest: (strGuestTag,strPubKey) ->\n    return null unless strGuestTag and strPubKey\n    strPubKey = strPubKey.trimLines()\n    @guestKeys[strGuestTag] = strPubKey\n    if @guestKeyTimeouts[strGuestTag]\n      clearTimeout @guestKeyTimeouts[strGuestTag]\n    @guestKeyTimeouts[strGuestTag] = Utils.delay Config.RELAY_SESSION_TIMEOUT, =>\n      delete @guestKeys[strGuestTag]\n      delete @guestKeyTimeouts[strGuestTag]\n      @emit 'tmpguesttimeout', strGuestTag\n\n  removeGuest: (strGuestTag) ->\n    return null unless strGuestTag and @guestKeys[strGuestTag]\n    @guestKeys[strGuestTag] = null # erase the pointer just in case\n    delete @guestKeys[strGuestTag]\n    @_removeGuestRecord strGuestTag\n\n  getGuestKey: (strGuestTag) ->\n    return null unless strGuestTag and @guestKeys[strGuestTag]\n    new Keys\n      boxPk: @getGuestRecord(strGuestTag).fromBase64()\n\n  getGuestRecord: (strGuestTag) ->\n    return null unless strGuestTag and @guestKeys[strGuestTag]\n    @guestKeys[strGuestTag]\n\n  # have to call with overseerAuthorized as true for extra safety\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    rcopy = @registry.slice()\n    @removeGuest g for g in rcopy\n    @storage.remove 'guest_registry'\n    @storage.remove 'comm_key'\n    @storage.selfDestruct(overseerAuthorized)\n\nmodule.exports = KeyRing\nwindow.KeyRing = KeyRing if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Keys represents a public/secret key pair object as generated by js-nacl\nUtils = require 'utils'\n\nclass Keys\n\n  # constructs an object from the hashKeys object passed to it, or creates an\n  # empty object.\n  constructor: (hashKeys) ->\n    return unless hashKeys\n    Utils.extend @, hashKeys\n\n  toString: ->\n    JSON.stringify @constructor.keys2str @\n\n  @fromString: (strKeys) ->\n    return null unless strKeys\n    @str2keys JSON.parse strKeys.trimLines()\n\n  key2str: (strName) ->\n    return null unless strName and @[strName]?\n    @[strName].toBase64()\n\n  strPubKey: ->\n    @boxPk.toBase64()\n\n  strSecKey: ->\n    @boxSk.toBase64()\n\n  equal: (k) ->\n    return false unless @strPubKey() is k.strPubKey()\n    return false if @boxSk? isnt k.boxSk?\n    return @strSecKey() is k.strSecKey() if @boxSk?\n    return true\n\n  # Convert obj with UInt8Array to obj with strings\n  @keys2str: (objKey) ->\n    r = new Keys()\n    for own k, v of objKey\n      r[k] = v.toBase64()\n    r\n\n  # Convert obj with strings to obj with UInt8Array\n  @str2keys: (strObj) ->\n    r = new Keys()\n    for own k, v of strObj\n      r[k] = v.fromBase64()\n    r\n\nmodule.exports  = Keys\nwindow.Keys = Keys if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig        = require 'config'\nKeyRing       = require 'keyring'\nNacl          = require 'nacl'\nUtils         = require 'utils'\nEventEmitter  = require('events').EventEmitter\n\n# Mailbox service to connect with the Zax relay service\nclass MailBox extends EventEmitter\n\n  # Creates a new client Mailbox that will represent an hpk mailbox on the\n  # relay. You can provide a friendly unique name to represent that Mailbox as\n  # an *identity*. That name should be unique locally, since it's used as a\n  # storage tag.\n\n  # If your client supports dedicated cryptographic storage, you can keep the\n  # master encryption key in that storage and provide it as strMasterKey.\n\n  # All Mailbox storage calls will be symmetrically encrypted with that key.\n  # Otherwise we will make a key for you, and save it in the same CryptoStorage\n  # as the rest of of the data.\n  constructor: (@identity, strMasterKey = null) ->\n    @keyRing = new KeyRing(@identity, strMasterKey)\n    @sessionKeys = {}\n    @sessionTimeout = {}\n\n  # You can create a Mailbox where the secret identity key is derived from a\n  # well-known seed.\n  @fromSeed: (seed, id = seed, strMasterKey = null) ->\n    mbx = new MailBox(id, strMasterKey)\n    mbx.keyRing.commFromSeed(seed)\n    mbx._hpk = null\n    return mbx\n\n  # You can also create a Mailbox if you already know the secret identity key\n  @fromSecKey: (secKey, id, strMasterKey = null) ->\n    mbx = new MailBox(id, strMasterKey)\n    mbx.keyRing.commFromSecKey(secKey)\n    mbx._hpk = null\n    return mbx\n\n  # --- Mailbox keys ---\n  # This is the HPK (hash of the public key) of your mailbox. This is what Zax\n  # Relays use as the universal address of your mailbox.\n  hpk: ->\n    return @_hpk if @_hpk\n    @_hpk = Nacl.h2(@keyRing.commKey.boxPk)\n\n  # This is your public identity and default communication key. Your\n  # correspondents can know it, whereas Relays do not need it (other than\n  # temporarily for internal use during the ownership proof)\n  getPubCommKey: ->\n    @keyRing.getPubCommKey()\n\n  # Allows for preemptive session renewal to avoid\n  # timeouts in the middle of a relay check\n  timeToSessionExpiration: (sess_id)->\n    session = @sessionTimeout[sess_id]\n    if !session\n      return 0\n    Math.max(Config.RELAY_SESSION_TIMEOUT - (Date.now() - session.startTime), 0)\n\n  # Each session with each Zax Relay creates its own temporary session keys\n  createSessionKey: (sess_id) ->\n    throw new Error('createSessionKey - no sess_id') unless sess_id\n    return @sessionKeys[sess_id] if @sessionKeys[sess_id]?\n\n    # cancel the previous timer to prevent erase of a newly created session key\n    # if createSessionKey() is called repeatedly with the same sess_id\n    if @sessionTimeout[sess_id]\n      clearTimeout @sessionTimeout[sess_id].timeoutId\n\n    @sessionKeys[sess_id] = Nacl.makeKeyPair()\n    # Remove key material after it expires on the relay\n    @sessionTimeout[sess_id] =\n      timeoutId: Utils.delay Config.RELAY_SESSION_TIMEOUT, => @_clearSession(sess_id)\n      startTime: Date.now()\n\n    return @sessionKeys[sess_id]\n\n  _clearSession: (sess_id)->\n    @sessionKeys[sess_id] = null\n    delete @sessionKeys[sess_id]\n    @sessionTimeout[sess_id] = null\n    delete @sessionTimeout[sess_id]\n    @emit('relaysessiontimeout', sess_id)\n\n  # Locally determine whether Relay.connectMailbox() needs to be called\n  isConnectedToRelay: (relay = @lastRelay) ->\n    throw new Error('relayDelete - no open relay') unless relay\n    @lastRelay = relay\n    relayId = \"relay_#{relay.url}\" # also used in Relay.connectMailbox()\n    return !!@sessionKeys[relayId]\n\n  # --- Low level encoding/decoding ---\n\n  rawEncodeMessage: (msg, pkTo, skFrom) ->\n    throw new Error('rawEncodeMessage: missing params') unless msg? and pkTo? and skFrom?\n    nonce = @_makeNonce()\n    return r =\n      nonce: nonce.toBase64()\n      ctext: Nacl.use().crypto_box(\n        @_parseData(msg)\n        nonce\n        pkTo\n        skFrom).toBase64()\n\n  rawDecodeMessage: (nonce, ctext, pkFrom, skTo) ->\n    throw new Error('rawEncodeMessage: missing params') unless nonce? and ctext? and pkFrom? and skTo?\n    NC = Nacl.use()\n    JSON.parse NC.decode_utf8 NC.crypto_box_open(ctext, nonce, pkFrom, skTo)\n\n  # Encodes a free-form object *msg* to the guest key of a guest already\n  # added to our keyring. If the session flag is set, we will look for keys in\n  # temporary, not the persistent collection of session keys. skTag lets you\n  # specifiy the secret key in a key ring\n  encodeMessage: (guest, msg, session = false, skTag = null) ->\n    throw new Error('encodeMessage: missing params') unless guest? and msg?\n    throw new Error(\"encodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk guest)?\n    sk = @_getSecretKey guest, session, skTag\n    @rawEncodeMessage msg, gpk, sk\n\n  # Decodes a ciphertext from a guest key already in our keyring with this\n  # nonce. If session flag is set, looks for keys in temporary, not the\n  # persistent collection of session keys. skTag (optional) lets you specify\n  # the secret key in a key ring\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    throw new Error('decodeMessage: missing params') unless guest? and nonce? and ctext?\n    throw new Error(\"decodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk guest)?\n    sk = @_getSecretKey guest, session, skTag\n    @rawDecodeMessage nonce.fromBase64(), ctext.fromBase64(), gpk, sk\n\n  # Establishes a session, exchanges temp keys and proves our ownership of this\n  # Mailbox to this specific relay. This is the first function to start\n  # communications with any relay.\n  connectToRelay: (relay) ->\n    relay.openConnection().then =>\n      relay.connectMailbox(@).then =>\n        @lastRelay = relay\n\n  # --- Initial communications ---\n  # If we are not connected to a relay, we can still send a message (free form\n  # object) to a specific guest in our keyring. This call will first establish\n  # a connection to a relay and then send the first message via that relay.\n  sendToVia: (guest, relay, msg) ->\n    @connectToRelay(relay).then =>\n      @relaySend(guest, msg, relay)\n\n  # If we are not connected to a relay, we can still get pending messages for\n  # us from that relay. This call will first establish a connection to a relay\n  # and download messages. @lastDownload will be populated with an array of\n  # messages and download meta-data about those messages.\n  getRelayMessages: (relay) ->\n    @connectToRelay(relay).then =>\n      @relayMessages(relay)\n\n  # --- Established communication functions ---\n  # Once a connection with a relay is established there is no need to create\n  # new sessions. These 4 functions allow us to issue all 4 relay commands\n  # using previously established connections to a relay stored in @lastRelay\n\n  # Gets pending messages count and stores it in @count\n  relayCount: (relay = @lastRelay) ->\n    throw new Error('relayCount - no open relay') unless relay\n    @lastRelay = relay\n    relay.count(@).then =>\n      @count = parseInt relay.result\n\n  # Sends a free-form object to a guest whose keys we already have in our\n  # keyring via @lastRelay\n  relaySend: (guest, msg, relay = @lastRelay) ->\n    throw new Error('mbx: relaySend - no open relay') unless relay\n    @lastRelay = relay\n    encMsg = @encodeMessage(guest, msg)\n    @lastMsg = encMsg\n    relay.upload(@, Nacl.h2(@_gPk guest), encMsg)\n\n  # Downloads pending relay messages into @lastDownload\n  relayMessages: (relay = @lastRelay) ->\n    throw new Error('relayMessages - no open relay') unless relay\n    @lastRelay = relay\n    relay.download(@).then =>\n      download = []\n      for emsg in relay.result\n        if (tag = @keyRing.tagByHpk emsg.from)\n          emsg['fromTag'] = tag\n          emsg['msg'] = @decodeMessage tag, emsg.nonce, emsg.data\n          delete emsg.data if emsg['msg']?\n        download.push emsg\n      @lastDownload = download\n      download\n\n  # If @downloadMeta has been populated by previous calls, this maps the list\n  # of nonces of current messages on the relay. Since nonces are forced to be\n  # unique, they are used as global message ids for a given mailbox\n  relayNonceList: (download = @lastDownload) ->\n    throw new Error('relayNonceList - no metadata') unless download\n    Utils.map download, (i) -> i.nonce\n\n  # Deletes messages from the relay given a list of message nonces.\n  relayDelete: (list, relay = @lastRelay) ->\n    throw new Error('relayDelete - no open relay') unless relay\n    @lastRelay = relay\n    relay.delete(@, list)\n\n  # Calls @relayDelete @relayNonceList: deletes up to the first 100 messages\n  # from the relay for a given mailbox.\n  clean: (r) ->\n    @getRelayMessages(r).then (download)=>\n      @relayDelete(@relayNonceList(download), r)\n\n  # Deletes a Mailbox and all its data from local CryptoStorage. This is a very\n  # destructive operation, use with caution - it will also delete the Mailbox\n  # keyring along with all stored public keys. To restore that information, you\n  # will need to do another key exchange with all the guests on your keyring.\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    @keyRing.selfDestruct(overseerAuthorized)\n\n  # --- Protected helpers ---\n\n  # Get a guest key pair by id\n  _gKey: (strId) ->\n    return null unless strId\n    @keyRing.getGuestKey strId\n\n  # Get a guest public key by id\n  _gPk: (strId) ->\n    return null unless strId\n    @_gKey(strId)?.boxPk\n\n  _gHpk: (strId) ->\n    return null unless strId\n    Nacl.h2 @_gPk strId\n\n  _getSecretKey: (guest, session, skTag) ->\n    unless skTag\n      return if session then @sessionKeys[guest].boxSk else @keyRing.commKey.boxSk\n    else\n      # In this case we use the key ring to store temp secret keys\n      return @_gPk skTag\n\n  # Converts any object into Uint8Array\n  _parseData: (data) ->\n    return data if Utils.type(data) is 'Uint8Array'\n    Nacl.use().encode_utf8 JSON.stringify data\n\n  # Makes a timestamp nonce that a relay expects for any crypto operations.\n  # timestamp is the first 8 bytes, the rest is random\n  _makeNonce: (time = parseInt(Date.now() / 1000)) ->\n    nonce = Nacl.use().crypto_box_random_nonce()\n    throw new Error('RNG failed, try again?') unless nonce? and nonce.length is 24\n\n    # split timestamp integer as an array of bytes\n    bytes = Utils.itoa time\n\n    # copy the timestamp into the first 8 bytes of nonce\n    nonce[i] = 0 for i in [0..7]\n    nonce[8 - bytes.length + i] = bytes[i] for i in [0..(bytes.length - 1)]\n    return nonce\n\nmodule.exports = MailBox\nwindow.MailBox = MailBox if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nmodule.exports =\n  Utils:                require 'utils'\n  Mixins:               require 'mixins'\n  Nacl:                 require 'nacl'\n  Keys:                 require 'keys'\n  SimpleStorageDriver:  require 'test_driver'\n  CryptoStorage:        require 'crypto_storage'\n  KeyRing:              require 'keyring'\n  MailBox:              require 'mailbox'\n  Relay:                require 'relay'\n  RachetBox:            require 'rachetbox'\n  Config:               require 'config'\n\n  # storeImpl required API:\n  # - get(key: String): Object\n  # - set(key: String, value: Object): Void\n  # - remove(key: String): Void\n\n  startStorageSystem: (storeImpl) ->\n    @CryptoStorage.startStorageSystem storeImpl\n\n  # ajaxImpl required API:\n  # - ajax( url: String, data: String ): Promise\n  #   Promise: resolved with text/plain response\n  #   method: POST\n  #   contentType: 'text/plain'\n  #   dataType: 'text'\n\n  setAjaxImpl: (ajaxImpl)->\n    @Utils.setAjaxImpl ajaxImpl\n\n# export glow in browser\nif window\n  window.glow = module.exports\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Extends several low level data types with utility functions\nUtils = require 'utils'\n\n# --- Extending functions of String class ---\nUtils.include String,\n  # string to an array of byte values\n  toCodeArray: ->\n    (s.charCodeAt() for s in @)\n\n  # UTF8 conversions\n  toUTF8: ->\n    unescape encodeURIComponent @\n  fromUTF8: ->\n    decodeURIComponent escape @\n\n  # Each char code to a Uint8Array\n  toUint8Array: ->\n    new Uint8Array @.toUTF8().toCodeArray()\n\n  toUint8ArrayRaw: ->\n    new Uint8Array @.toCodeArray()\n\n  # From base64 string to Uint8Array\n  fromBase64: ->\n    new Uint8Array (atob @).toCodeArray()\n\n  # Trim line feed chars\n  trimLines: ->\n    @.replace('\\r\\n', '').replace('\\n', '').replace('\\r', '')\n# ---\n\n# --- Extending functions of Array , Uint8Array , Uint16Array classes ---\nfor C in [Array , Uint8Array , Uint16Array]\n  Utils.include C,\n    # From JS arrays of char codes to a string\n    # UTF16 chars above ASCII will generate codes above 255\n    fromCharCodes: ->\n      (String.fromCharCode(c) for c in @).join('')\n\n    # From array of char codes to a base64 string\n    toBase64: ->\n      btoa @fromCharCodes()\n\n    xorWith: (a) ->\n      return null unless @.length is a.length\n      new Uint8Array(c ^ a[i] for c, i in @)\n\n    equal: (a2) ->\n      return false if @.length isnt a2.length\n      for v,i in @\n        return false if v isnt a2[i]\n      return true\n\nUtils.include Uint8Array,\n  # creates a new Uint8Array that is the concat of self & anotherArray\n  concat: (anotherArray) ->\n    tmp = new Uint8Array(@byteLength + anotherArray.byteLength)\n    tmp.set(new Uint8Array(@), 0)\n    tmp.set(anotherArray, @byteLength)\n    return tmp\n\n  # .fill() for setting the whole array to a particular value\n  fillWith: (val) ->\n    for v, i in @\n      @[i] = val\n    @ # allows call chaining\n# --- end mixins ---\n\nmodule.exports = {} # Nothing to export\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# A light wrapper around the js-nacl library\n\n# If we are running in the browser, then nacl_factory will be defined by\n# including the nacl_factory.js lib before including glow. If we are on node,\n# then require 'js-nacl' will include nacl_factory appropriately\nif nacl_factory?\n  js_nacl = nacl_factory\nelse\n  js_nacl  = require 'js-nacl' # https://github.com/tonyg/js-nacl\n\nKeys          = require 'keys'\nUtils         = require 'utils'\n\nclass Nacl\n  @HEAP_SIZE:     2 ** 23\n  @_instance:     null\n  @_unloadTimer:  null\n\n  # whenever we call use, we're accessing the js-nacl lib for a function call\n  # if we haven't used any js-nacl lib function calls in 15 seconds, then it\n  # unloads via the unload call\n  @use: ->\n    # timer unloads 8mb heap 15 sec after last use\n    clearTimeout @_unloadTimer if @_unloadTimer\n    @_unloadTimer = setTimeout((-> Nacl.unload()), 15 * 1000)\n\n    unless window.__naclInstance   # Global instance to avoid duplicating heap\n      window.__naclInstance = js_nacl.instantiate(@HEAP_SIZE) # 8mb heap\n    window.__naclInstance\n\n  @unload: ->\n    # Nacl hasn't been used in 15 seconds, unload it and free the heap\n    @_unloadTimer = null\n    window.__naclInstance = null\n    delete window.__naclInstance\n\n  @makeSecretKey: ->\n    new Keys(\n      key: @use().random_bytes(@use().crypto_secretbox_KEYBYTES)\n    )\n\n  @random: (size = 32) ->\n    @use().random_bytes(size)\n\n  @makeKeyPair: ->\n    new Keys @use().crypto_box_keypair()\n\n  @fromSecretKey: (raw_sk) ->\n    new Keys @use().crypto_box_keypair_from_raw_sk(raw_sk)\n\n  @fromSeed: (seed) ->\n    new Keys @use().crypto_box_keypair_from_seed(seed)\n\n  @sha256: (data) ->\n    @use().crypto_hash_sha256 data\n\n  @to_hex: (data) ->\n    @use().to_hex data\n\n  @from_hex: (data) ->\n    @use().from_hex data\n\n  @encode_utf8: (data) ->\n    @use().encode_utf8 data\n\n  @decode_utf8: (data) ->\n    @use().decode_utf8 data\n\n  # h2(m) = sha256(sha256(32x0 + m))\n  # Zero out initial sha256 block, and double hash 0-padded message\n  # http://cs.nyu.edu/~dodis/ps/h-of-h.pdf\n  @h2: (str) ->\n    str = str.toUint8ArrayRaw() if Utils.type(str) is 'String'\n    tmp = new Uint8Array(32 + str.length)\n    tmp.fillWith 0\n    tmp.set(str, 32)\n    @sha256 @sha256 tmp\n\n  @h2_64: (b64str) ->\n    Nacl.h2(b64str.fromBase64()).toBase64()\n\nmodule.exports = Nacl\nwindow.Nacl = Nacl if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nUtils       = require 'utils'\nNacl        = require 'nacl'\nKeys        = require 'keys'\nKeyRing     = require 'keyring'\nKeyRatchet  = require 'keyratchet'\nMailbox     = require 'mailbox'\n\n# RatchetBox is a prototype to show a simple ratcheting schema implementation via Glow.\n# By overload relay_send and relay_messages we can introduce a key ratchet between\n# mailbox and its guests. All payload messages (object trees) are delivered along with\n# system field 'next_key' that contains next public key in the ratchet. The guest \n# confirm key with system field 'got_key'. Any message to guest or from guest advances\n# the ratchet to next_key from that side. \n#\n# TODO: provision for loss of messages by introducing 'reset' field - mailboxes\n# can singnal they dont have key material to decrypt laste message. That will revert\n# ratchet to long term idenitiy key and will cause the start of new key chain.\nclass RatchetBox extends Mailbox\n\n  _loadRatchets: (guest) ->\n    # every guest will have a next confirmed key that we can reliably use, and\n    # a next key we are awaiting confirmation for. In local storage we will\n    # reference guests by the usual guest hpk=h2(pk)\n    gHpk = @_gHpk(guest).toBase64()\n\n    # if we have confirmed ratchet key we use it, otherwise\n    # fallback to our @commKey\n    @krLocal = new KeyRatchet(\"local_#{gHpk}_for_#{@hpk().toBase64()}\",\n      @keyRing, @keyRing.commKey)\n\n    @krGuest = new KeyRatchet(\"guest_#{gHpk}_for_#{@hpk().toBase64()}\",\n      @keyRing, @keyRing.getGuestKey guest)\n\n  relaySend: (guest, m) ->\n    throw new Error('rbx: relaySend - no open relay') unless @lastRelay\n    throw new Error('rbx: relaySend - missing params') unless guest and m\n\n    # now we have 2 keys - the next key to send to a guest, and the last\n    # confirmed key we can use for encryption - it may be the comm identity key\n    # if we are at the start of a ratchet\n    @_loadRatchets(guest)\n\n    # Save original message and include ratchet information along\n    msg = {org_msg: m}\n    # Add next key to org_msg unless its a key confirmation message\n    msg['nextKey'] = @krLocal.nextKey.strPubKey() unless m.got_key?\n\n    # Full message or just a 'got_key' confirmation?\n    if not m.got_key?\n      # Use the confirmed ratchet key we got from the guest, or it will default\n      # to her public commKey\n      encMsg = @rawEncodeMessage(msg, @krGuest.confirmedKey.boxPk, @krLocal.confirmedKey.boxSk)\n      @lastMsg = encMsg\n    else\n      # sending key confirmation using last key\n      encMsg = @rawEncodeMessage(msg, @krGuest.lastKey.boxPk, @krLocal.confirmedKey.boxSk)\n\n    # console.log \"sent #{@getPubCommKey()} => #{@_gPk(guest).toBase64()} with #{@krGuest.confirmedKey.boxPk.toBase64()} | nonce = #{encMsg.nonce}\"\n    @lastRelay.upload(@, Nacl.h2(@_gPk guest), encMsg)\n\n  _tryKeypair: (nonce, ctext, pk, sk) ->\n    try\n      return @rawDecodeMessage nonce.fromBase64(),\n        ctext.fromBase64(), pk, sk\n    catch e\n      return null\n\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    return super(guest, nonce, ctext, session, skTag) if session\n    throw new Error('decodeMessage: missing params') unless guest? and nonce? and ctext?\n    @_loadRatchets(guest)\n    # console.log \"receiving from #{@_gPk(guest).toBase64()} => #{@getPubCommKey()} with #{@krGuest.confirmedKey.boxPk.toBase64()}\"\n\n    keyPairs = [\n      # defult: confirmed local and guest\n      [@krGuest.confirmedKey.boxPk, @krLocal.confirmedKey.boxSk],\n\n      # Guest might not have switched to latest key yet\n      [@krGuest.lastKey.boxPk, @krLocal.lastKey.boxSk],\n      [@krGuest.confirmedKey.boxPk, @krLocal.lastKey.boxSk],\n      [@krGuest.lastKey.boxPk, @krLocal.confirmedKey.boxSk]]\n\n    for kp, i in keyPairs\n      # console.log \"key pair #{i}\" if i>0\n      r = @_tryKeypair nonce, ctext, kp[0], kp[1]\n      return r if r?\n\n    console.log 'RatchetBox decryption failed: message from unknown guest or ratchet out of sync'\n    # TODO: Add ratchet key reset protocol for this guest here (send \"reset\" command)\n    return null\n\n  relayMessages: ->\n    # First download pending messages\n    super().then =>\n      # Now, lets process ratchet-related information in these messages\n      sendConfs = []\n\n      for m in @lastDownload\n        continue unless m.fromTag\n\n        @_loadRatchets(m.fromTag)\n\n        # If guests send use their nextKey for ratchet\n        if m.msg?.nextKey?\n          # save nextKey for that guest\n          if @krGuest.confKey new Keys {boxPk: m.msg.nextKey.fromBase64()}\n            # send guest confirmation that we got it\n            sendConfs.push\n              toTag: m.fromTag\n              key: m.msg.nextKey\n              msg:\n                got_key: Nacl.h2_64(m.msg.nextKey)\n\n        # If we got confirmation that our key is received\n        # we should move it to nextKey for that guest\n\n        if m.msg?.org_msg?.got_key?\n          m.msg = m.msg.org_msg\n          # do we saved that key locally?\n          if @krLocal.isNextKeyHash m.msg.got_key.fromBase64()\n            @krLocal.pushKey Nacl.makeKeyPair()\n          m.msg = null\n          # we processed it, nothing else to do with this message\n\n        # restore usual @lastDownload structure\n        if m.msg?\n          m.msg = m.msg.org_msg\n\n      # now we can send confirmations to guests that we got their key. Note\n      # that got_key is a service message that wont advance the ratchet\n      sendNext = =>\n        if sendConfs.length > 0\n          sc = sendConfs.shift()\n          @relaySend(sc.toTag,sc.msg).then =>\n            sendNext()\n      sendNext()\n\n  selfDestruct: (overseerAuthorized, withRatchet = false) ->\n    return unless overseerAuthorized\n    if withRatchet\n      for guest in @keyRing.registry\n        @_loadRatchets(guest)\n        @krLocal.selfDestruct(withRatchet)\n        @krGuest.selfDestruct(withRatchet)\n    super(overseerAuthorized)\n\nmodule.exports = RatchetBox\nwindow.RatchetBox = RatchetBox if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig       = require 'config'\nKeys         = require 'keys'\nNacl         = require 'nacl'\nUtils        = require 'utils'\nEventEmitter = require('events').EventEmitter\n\nclass Relay extends EventEmitter\n  # skip url for offline testing\n  constructor: (@url = null) ->\n    @_resetState() # until a succesful handshake\n    @lastError = null\n\n    # plugins can add their own commands to specific relays\n    @RELAY_COMMANDS = ['count', 'upload', 'download', 'delete']\n\n  openConnection: ->\n    # exchange tokens with a relay and get a temp session key for this relay\n    @getServerToken().then =>\n      @getServerKey()\n\n  getServerToken: ->\n    throw new Error('getServerToken - no url') unless @url\n    @lastError = null\n\n    # Generate a clientToken. It will be used as part of handshake id with relay\n    @clientToken = Nacl.random(Config.RELAY_TOKEN_LEN) unless @clientToken\n\n    # sanity check the client token\n    if @clientToken and @clientToken.length isnt Config.RELAY_TOKEN_LEN\n      throw new Error(\"Token must be #{Config.RELAY_TOKEN_LEN} bytes\")\n\n    # avoid resetting the @clientToken in case the following ajax call takes\n    # a longer time to complete\n    clearTimeout(@clientTokenExpiration) if @clientTokenExpiration\n\n    @_ajax('start_session', @clientToken.toBase64()).then (data) =>\n      # Will remove after token expires on relay\n      # Call before assigning @relayToken to prevent accidental\n      # reset of the newly assigned value.\n      @_scheduleExpireSession()\n\n      # relay responds with its own counter token. Until session is\n      # established these 2 tokens are handshake id.\n      lines = @_processData data\n      @relayToken = lines[0].fromBase64()\n      @diff = if lines.length is 2 then parseInt(lines[1]) else 0\n\n      if @diff > 4\n        console.log \"Relay #{@url} requested difficulty #{@diff}. Session handshake may take longer.\"\n      if @diff > 16\n        console.log \"Attempting handshake at difficulty #{@diff}! This may take a while\"\n\n  getServerKey: ->\n    throw new Error('getServerKey - missing params') unless @url and @clientToken and @relayToken\n    @lastError = null\n\n    # After the clientToken is sent to reley, we use only the h2() of it\n    @h2ClientToken = Nacl.h2(@clientToken).toBase64()\n\n    handshake = @clientToken.concat @relayToken\n    if @diff is 0\n      sessionHandshake = Nacl.h2(handshake).toBase64()\n    else\n      nonce = Nacl.random 32\n      until Utils.arrayZeroBits(Nacl.h2(handshake.concat nonce), @diff)\n        nonce = Nacl.random 32\n      sessionHandshake = nonce.toBase64()\n\n    # We confirm handshake by sending back h2(clientToken, relay_token)\n    @_ajax('verify_session', \"#{@h2ClientToken}\\r\\n#{sessionHandshake}\\r\\n\").then (d) =>\n      # relay gives us back temp session key\n      # masked by clientToken we started with\n      relayPk = d.fromBase64()\n      @relayKey = new Keys { boxPk: relayPk }\n      @online = true\n      # @_scheduleExpireSession Config.RELAY_SESSION_TIMEOUT\n      # Will remove after the key expires on this relay\n\n  connectMailbox: (mbx) ->\n    throw new Error('connectMailbox - missing params') unless mbx? and @online and @relayKey? and @url?\n    @lastError = null\n\n    relayId = \"relay_#{@url}\" # also used in MailBox.isConnectedToRelay()\n    clientTemp = mbx.createSessionKey(relayId).boxPk\n    mbx.keyRing.addTempGuest relayId, @relayKey.strPubKey()\n    delete @relayKey # now it belongs to the mailbox\n\n    maskedClientTempPk = clientTemp.toBase64()\n\n    # Alice creates a 32 byte session signature as\n    # h₂(a_temp_pk,relay_token, clientToken)\n    sign = clientTemp.concat(@relayToken).concat(@clientToken)\n    h2Sign = Nacl.h2(sign)\n\n    inner = mbx.encodeMessage relayId, h2Sign\n    inner['pub_key'] = mbx.keyRing.getPubCommKey()\n    outer = mbx.encodeMessage \"relay_#{@url}\", inner, true\n\n    @_ajax('prove',\n      \"#{@h2ClientToken}\\r\\n\" +\n      \"#{maskedClientTempPk}\\r\\n\" +\n      \"#{outer.nonce}\\r\\n\" +\n      \"#{outer.ctext}\")\n    .then (d)=>\n      # console.log \"#{@url} => #{d} messages\"\n      # return relayId, the mailbox emits 'relaysessiontimeout'\n      # with that relayId (sess_id) as a parameter.\n      relayId\n\n  runCmd: (cmd, mbx, params = null) ->\n    throw new Error('runCmd - missing params') unless cmd? and mbx?\n    unless cmd in @RELAY_COMMANDS\n      throw new Error(\"Relay #{@url} doesn't support #{cmd}\")\n    data =\n      cmd: cmd\n    data = Utils.extend data, params if params\n    message = mbx.encodeMessage \"relay_#{@url}\", data, true\n\n    @_ajax('command',\n      \"#{mbx.hpk().toBase64()}\\r\\n\" +\n      \"#{message.nonce}\\r\\n\" +\n      \"#{message.ctext}\")\n    .then (d)=>\n      return if cmd in ['upload'] # no data in the response\n      throw new Error(\"#{@url} - #{cmd} error\") unless d?\n      if cmd in ['count','download']\n        @result = @_processResponse(d, mbx, cmd)\n      else\n        @result = JSON.parse d\n\n  _processResponse: (d, mbx, cmd) ->\n    datain = @_processData d\n    unless datain.length is 2\n      throw new Error(\"#{@url} - #{cmd}: Bad response\")\n    nonce = datain[0]\n    ctext = datain[1]\n    mbx.decodeMessage(\"relay_#{@url}\", nonce, ctext, true)\n\n  _processData: (d) ->\n    datain = d.split('\\r\\n')\n    datain = d.split('\\n') unless datain.length >= 2\n    return datain\n\n  # Command wrappers\n\n  count: (mbx) ->\n    @runCmd('count', mbx)\n\n  upload: (mbx, toHpk, payload) ->\n    @runCmd('upload', mbx,\n      to: toHpk.toBase64()\n      payload: payload)\n\n  download: (mbx) ->\n    @runCmd('download', mbx)\n\n  delete: (mbx, nonceList) ->\n    @runCmd('delete', mbx,\n      payload: nonceList)\n\n  # Deletes all local session tokens\n  # Our information has expired on the relay and a new session has to be\n  # established with all new tokens\n  _resetState: ->\n    @clientToken = null\n    @online = false\n    @relayToken = null\n    @relayKey = null\n    @clientTokenExpiration = null\n    @clientTokenExpirationStart = 0\n\n  # Allows for preemptive client token renewal to avoid\n  # timeouts in the middle of a relay check\n  timeToTokenExpiration: ->\n    Math.max(Config.RELAY_TOKEN_TIMEOUT - (Date.now() - @clientTokenExpirationStart), 0)\n\n  # Allows for preemptive mailbox session renewal to avoid\n  # timeouts in the middle of a relay check\n  timeToSessionExpiration: (mbx)->\n    mbx.timeToSessionExpiration(\"relay_#{@url}\")\n\n  _scheduleExpireSession: ->\n    clearTimeout(@clientTokenExpiration) if @clientTokenExpiration\n    @clientTokenExpirationStart = Date.now()\n    @clientTokenExpiration = setTimeout( =>\n      @_resetState()\n      @emit('relaytokentimeout')\n    , Config.RELAY_TOKEN_TIMEOUT) # Token will expire on the relay\n\n  _ajax: (cmd, data) =>\n    Utils.ajax \"#{@url}/#{cmd}\", data\n    # TODO update for various implementations or make them provide it extra:\n    # .catch e\n    #   console.error @lastError = \"#{type}/#{xhr.status} - #{error}\"\n    #   @online = false\n    #   throw e\n\nmodule.exports = Relay\nwindow.Relay = Relay if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# A test driver - not to be used in production for permanent key storage\nclass SimpleTestDriver\n\n  _state: null\n  _key_tag: (key) -> \"#{@_root_tag}.#{key}\"\n\n  constructor: (root = 'storage.', sourceData = null) ->\n    @_root_tag = \"__glow.#{root}\" # + root\n    @_load(sourceData)\n\n  get: (key) ->\n    @_load() if not @_state\n    if @_state[key] then @_state[key] else JSON.parse localStorage.getItem @_key_tag key\n\n  set: (key, value) ->\n    @_load() if not @_state\n    @_state[key] = value\n    localStorage.setItem @_key_tag(key), JSON.stringify value\n    @_persist()\n\n  remove: (key) ->\n    @_load() if not @_state\n    delete @_state[key]\n    localStorage.removeItem @_key_tag key\n    @_persist()\n\n  _persist: () ->\n    # Permanently save the state object in a real driver\n    # _state.save()\n\n  _load: (sourceData = null) ->\n    # Load from persitent app storage in the real driver\n    @_state = if sourceData then sourceData else {}\n    console.log 'INFO: SimpleTestDriver uses localStorage and should not be\n      used in production for permanent key storage.'\n\nmodule.exports = SimpleTestDriver\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Low level basic utilities and mixins\n# zepto = require 'zepto' # minimalist js library. similar syntax to jQuery\nConfig = require 'config'\n\nclass Utils\n  # --- Mixins ---\n  # Wraps http://zeptojs.com/#$.extend - provided so that you can swap\n  # zepto for another js library that doesn't have the same extend behavior.\n  # Uses default impl if $.extend not available.\n  @extend = (target, source) ->\n    if $?.extend\n      $.extend target, source\n    else\n      for key, val of source\n        if source[key] isnt undefined\n          target[key] = source[key]\n      target\n\n  @map = (array, func) ->\n    if $?.map\n      $?.map array, func\n    else\n      # http://caniuse.com/#search=map\n      Array::map.apply array, [ func ]\n\n  # convenience function for extending an object by class\n  @include = (klass, mixin) ->\n    @extend klass.prototype, mixin\n\n  # extracts just the name portion as a string of an object's class\n  @type = (obj) ->\n    return 'undefined' if obj is undefined\n    return 'null' if obj is null\n    Object::toString.call(obj)\n      .replace('[', '').replace(']', '').split(' ')[1]\n\n  @ajaxImpl: null\n\n  @setAjaxImpl: (ajaxImpl)->\n    @ajaxImpl = ajaxImpl\n\n  # wraps http://zeptojs.com/#$.ajax - provided so that if you can swap\n  # zepto for another js library that doesn't have the same ajax behavior\n  @ajax: (url, data) ->\n\n    # no ajax impl set?\n    if @ajaxImpl is null\n      # try to auto-set some default implementations here, if present\n\n      # set the impl to q-xhr if present\n      if Q?.xhr\n        # console.log 'default ajax impl: setting to q-xhr'\n        @setAjaxImpl (url, data)->\n          Q.xhr\n            method: 'POST'\n            url: url\n            headers:\n              'Accept': 'text/plain'\n              'Content-Type': 'text/plain'\n            data: data\n            responseType: 'text'\n            timeout: Config.RELAY_AJAX_TIMEOUT\n            disableUploadProgress: true # https://github.com/nathanboktae/q-xhr/issues/12\n          .then (response)->\n            response.data\n\n      # try Zepto with Promises (will not catch exceptions in .then/.done)\n      else if $?.ajax && $?.Deferred\n        console.log 'default ajax impl: setting to zepto with promises'\n        @setAjaxImpl (url, data)->\n          $.ajax\n            url: url\n            type: 'POST'\n            dataType: 'text'\n            timeout: Config.RELAY_AJAX_TIMEOUT\n            context: @\n            error: console.log\n            contentType: 'text/plain'\n            data: data\n\n      else\n        throw new Error 'ajax implementation not set; use q-xhr or $http'\n\n    # invoke ajax\n    @ajaxImpl url, data\n\n  # calls func after the specified delay in milliseconds\n  @delay: (milliseconds, func) ->\n    setTimeout(func, milliseconds)\n\n  # splits an integer into an array of bytes\n  @itoa: (n) ->\n    return new Uint8Array(0 for i in [0..7]) if n <= 0\n    [floor, pw, lg] = [Math.floor, Math.pow, Math.log] # aliases\n\n    top = floor lg(n) / lg(256)\n    new Uint8Array( floor(n / pw(256, i)) % 256 for i in [top..0] )\n\n  # returns true if the rightmost n bits of a byte are 0\n  @firstZeroBits: (byte, n) ->\n    byte is ((byte >> n) << n)\n\n  # check whether the rightmost difficulty bits of an Uint8Array are 0, where\n  # the lowest indexes of the array represent those rightmost bits. Thus if\n  # the difficulty is 17, then arr[0] and arr[1] should be 0, as should the\n  # rightmost bit of arr[2]. This is used for our difficulty settings in Zax to\n  # reduce burden on a busy server by ensuring clients have to do some\n  # additional work during the session handshake\n  @arrayZeroBits: (arr, diff) ->\n    rmd = diff\n    for i in [0..(1 + diff / 8)]\n      a = arr[i]\n      return true if rmd <= 0\n      if rmd > 8\n        rmd -= 8\n        return false if a > 0\n      else\n        return @firstZeroBits(a, rmd)\n    return false\n\n  # Prints a current stack trace to the console\n  @logStack: (err) ->\n    err = new Error('stackLog') unless err\n    s = err.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n    .replace(/^\\s+at\\s+/gm, '')\n    .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@')\n    .split('\\n')\n    console.log \"#{i}: #{sl}\" for sl, i in s\n\nmodule.exports = Utils\nwindow.Utils = Utils if window.__CRYPTO_DEBUG\n"]}