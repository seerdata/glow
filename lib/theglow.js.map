{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/config.coffee","theglow.js","src/crypto_storage.coffee","src/keyratchet.coffee","src/keyring.coffee","src/keys.coffee","src/mailbox.coffee","src/main.coffee","src/mixins.coffee","src/nacl.coffee","src/rachetbox.coffee","src/relay.coffee","src/test_driver.coffee","src/utils.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Config","_NONCE_TAG","_SKEY_TAG","_DEF_ROOT","RELAY_TOKEN_LEN","RELAY_TOKEN_TIMEOUT","RELAY_SESSION_TIMEOUT","RELAY_AJAX_TIMEOUT",2,"CryptoStorage","Keys","Nacl","storageKey","this","root","_loadKey","newKey","prototype","tag","strKey","_saveKey","_set","toString","keyStr","_get","setKey","fromString","selfDestruct","overseerAuthorized","_localRemove","objStorageKey","makeSecretKey","save","strTag","data","aCText","nonce","use","encode_utf8","JSON","stringify","crypto_secretbox_random_nonce","crypto_secretbox","key","toBase64","get","aPText","ct","crypto_secretbox_open","fromBase64","parse","decode_utf8","remove","len","ref","_localGet","strData","_localSet","str","_storage","set","_storageDriver","startStorageSystem","driver","config","keys","nacl",3,"KeyRatchet","id","keyRing","firstKey","_roles","getKey","keyTag","startRatchet","lastKey","confirmedKey","nextKey","role","storeKey","saveKey","k","makeKeyPair","pushKey","results","push","confKey","newConfirmedKey","equal","curKey","h2LastKey","h2","boxPk","h2ConfirmedKey","h2NextKey","keyByHash","hash","isNextKeyHash","toStr","fromStr","Utils","extend","deleteKey","window","__CRYPTO_DEBUG",4,"KeyRing","hasProp","hasOwnProperty","strMasterKey","storage","_ensureKeys","_loadCommKey","_loadGuestKeys","commKey","j","registry","guestKeys","commFromSeed","seed","fromSeed","commFromSecKey","rawSecKey","fromSecretKey","tagByHpk","hpk","v","getMasterKey","key2str","getPubCommKey","strPubKey","_addRegistry","strGuestTag","indexOf","_saveNewGuest","pk","_removeGuestRecord","splice","addGuest","b64_pk","trimLines","addTempGuest","delay","_this","removeGuest","getGuestKey","getGuestRecord","g","rcopy","slice","crypto_storage","utils",5,"hashKeys","constructor","keys2str","strKeys","str2keys","strName","strSecKey","boxSk","objKey","strObj",6,"MailBox","identity","sessionKeys","sessionRelay","sessionTimeout","mbx","_hpk","fromSecKey","secKey","createSessionKey","sess_id","rawEncodeMessage","msg","pkTo","skFrom","_makeNonce","ctext","crypto_box","_parseData","rawDecodeMessage","pkFrom","skTo","NC","crypto_box_open","encodeMessage","guest","session","skTag","gpk","sk","_gPk","_getSecretKey","decodeMessage","connectToRelay","relay","openConnection","then","connectMailbox","lastRelay","sendToVia","relaySend","getRelayMessages","relayMessages","relayCount","count","parseInt","result","encMsg","lastMsg","upload","download","emsg","lastDownload","from","relayNonceList","map","relayDelete","list","clean","_gKey","strId","_gHpk","type","time","bytes","Date","now","crypto_box_random_nonce","itoa","keyring",7,"Mixins","SimpleStorageDriver","Relay","RachetBox","storeImpl","setAjaxImpl","ajaxImpl","glow","mailbox","mixins","rachetbox","test_driver",8,"C","include","String","toCodeArray","charCodeAt","toUTF8","unescape","encodeURIComponent","fromUTF8","decodeURIComponent","escape","toUint8Array","Uint8Array","toUint8ArrayRaw","atob","replace","Array","Uint16Array","fromCharCodes","c","len1","fromCharCode","join","btoa","xorWith","a2","concat","anotherArray","tmp","byteLength","fillWith","val",9,"js_nacl","nacl_factory","HEAP_SIZE","Math","pow","_instance","_unloadTimer","clearTimeout","setTimeout","unload","__naclInstance","instantiate","random_bytes","crypto_secretbox_KEYBYTES","random","size","crypto_box_keypair","raw_sk","crypto_box_keypair_from_raw_sk","crypto_box_keypair_from_seed","sha256","crypto_hash_sha256","to_hex","from_hex","h2_64","b64str","js-nacl","undefined",10,"Mailbox","RatchetBox","child","parent","ctor","__super__","superClass","apply","arguments","_loadRatchets","gHpk","krLocal","krGuest","m","org_msg","got_key","_tryKeypair","error","keyPairs","kp","console","log","ref1","ref2","ref3","sendConfs","sendNext","fromTag","toTag","sc","shift","withRatchet","keyratchet",11,"bind","fn","me","item","url","_ajax","_resetState","lastError","RELAY_COMMANDS","getServerToken","getServerKey","clientToken","lines","_processData","relayToken","diff","_scheduleExpireSession","handshake","sessionHandshake","h2ClientToken","arrayZeroBits","d","relayPk","relayKey","online","clientTemp","h2Sign","inner","maskedClientTempPk","outer","relayId","sign","runCmd","cmd","params","message","_processResponse","datain","split","toHpk","payload","to","nonceList","clientTokenExpiration","tout","ajax",12,"SimpleTestDriver","sourceData","_root_tag","_load","_state","_key_tag","localStorage","getItem","value","setItem","_persist","removeItem",13,"target","source","$","array","func","klass","mixin","obj","Object","Q","xhr","method","headers","Accept","Content-Type","responseType","timeout","disableUploadProgress","response","Deferred","dataType","context","contentType","milliseconds","floor","lg","pw","top","firstZeroBits","byte","arr","rmd","logStack","err","sl","stack"],"mappings":"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","file":"theglow.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Constants that define behavior for the glow library\nclass Config\n  @_NONCE_TAG:  '__nc'\n  @_SKEY_TAG:   'storage_key'\n  @_DEF_ROOT:   '.v1.stor.vlt12'\n\n  @RELAY_TOKEN_LEN: 32 # Relay tokens, keys and hashes are 32 bytes\n\n  # 1 min - Matched with config.x.relay.token_timeout\n  @RELAY_TOKEN_TIMEOUT: 60 * 1000\n\n  # 5 min - Matched with config.x.relay.session_timeout\n  @RELAY_SESSION_TIMEOUT: 5 * 60 * 1000\n\n  @RELAY_AJAX_TIMEOUT: 5 * 1000 # 5 seconds\n  # @RELAY_AJAX_TIMEOUT: 15 * 1000 # HIGH LATENCY\n\nmodule.exports = Config\n\n# Put all libs into global namespace for console access\n# window.__CRYPTO_DEBUG = true\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar Config;\n\nConfig = (function() {\n  function Config() {}\n\n  Config._NONCE_TAG = '__nc';\n\n  Config._SKEY_TAG = 'storage_key';\n\n  Config._DEF_ROOT = '.v1.stor.vlt12';\n\n  Config.RELAY_TOKEN_LEN = 32;\n\n  Config.RELAY_TOKEN_TIMEOUT = 60 * 1000;\n\n  Config.RELAY_SESSION_TIMEOUT = 5 * 60 * 1000;\n\n  Config.RELAY_AJAX_TIMEOUT = 5 * 1000;\n\n  return Config;\n\n})();\n\nmodule.exports = Config;\n\n\n},{}],2:[function(require,module,exports){\nvar Config, CryptoStorage, Keys, Nacl;\n\nConfig = require('config');\n\nKeys = require('keys');\n\nNacl = require('nacl');\n\nCryptoStorage = (function() {\n  CryptoStorage.prototype.tag = function(strKey) {\n    return strKey && strKey + this.root;\n  };\n\n  function CryptoStorage(storageKey, r) {\n    this.storageKey = storageKey != null ? storageKey : null;\n    if (r == null) {\n      r = null;\n    }\n    this.root = r ? \".\" + r + Config._DEF_ROOT : Config._DEF_ROOT;\n    if (!this.storageKey) {\n      this._loadKey();\n    }\n    if (!this.storageKey) {\n      this.newKey();\n    }\n  }\n\n  CryptoStorage.prototype._saveKey = function() {\n    return this._set(Config._SKEY_TAG, this.storageKey.toString());\n  };\n\n  CryptoStorage.prototype._loadKey = function() {\n    var keyStr;\n    keyStr = this._get(Config._SKEY_TAG);\n    if (keyStr) {\n      return this.setKey(Keys.fromString(keyStr));\n    }\n  };\n\n  CryptoStorage.prototype.selfDestruct = function(overseerAuthorized) {\n    if (overseerAuthorized) {\n      return this._localRemove(this.tag(Config._SKEY_TAG));\n    }\n  };\n\n  CryptoStorage.prototype.setKey = function(objStorageKey) {\n    this.storageKey = objStorageKey;\n    return this._saveKey();\n  };\n\n  CryptoStorage.prototype.newKey = function() {\n    return this.setKey(Nacl.makeSecretKey());\n  };\n\n  CryptoStorage.prototype.save = function(strTag, data) {\n    var aCText, n, nonce;\n    if (!(strTag && data)) {\n      return null;\n    }\n    n = Nacl.use();\n    data = n.encode_utf8(JSON.stringify(data));\n    nonce = n.crypto_secretbox_random_nonce();\n    aCText = n.crypto_secretbox(data, nonce, this.storageKey.key);\n    this._set(strTag, aCText.toBase64());\n    this._set(Config._NONCE_TAG + \".\" + strTag, nonce.toBase64());\n    return true;\n  };\n\n  CryptoStorage.prototype.get = function(strTag) {\n    var aPText, ct, n, nonce;\n    ct = this._get(strTag);\n    if (!ct) {\n      return null;\n    }\n    nonce = this._get(Config._NONCE_TAG + \".\" + strTag);\n    if (!nonce) {\n      return null;\n    }\n    n = Nacl.use();\n    aPText = n.crypto_secretbox_open(ct.fromBase64(), nonce.fromBase64(), this.storageKey.key);\n    return JSON.parse(n.decode_utf8(aPText));\n  };\n\n  CryptoStorage.prototype.remove = function(strTag) {\n    var i, len, ref, tag;\n    ref = [strTag, Config._NONCE_TAG + \".\" + strTag];\n    for (i = 0, len = ref.length; i < len; i++) {\n      tag = ref[i];\n      this._localRemove(this.tag(tag));\n    }\n    return true;\n  };\n\n  CryptoStorage.prototype._get = function(strTag) {\n    return this._localGet(this.tag(strTag));\n  };\n\n  CryptoStorage.prototype._set = function(strTag, strData) {\n    if (!(strTag && strData)) {\n      return null;\n    }\n    this._localSet(this.tag(strTag), strData);\n    return strData;\n  };\n\n  CryptoStorage.prototype._localGet = function(str) {\n    return this._storage().get(str) || null;\n  };\n\n  CryptoStorage.prototype._localSet = function(str, data) {\n    return this._storage().set(str, data);\n  };\n\n  CryptoStorage.prototype._localRemove = function(str) {\n    return this._storage().remove(str);\n  };\n\n  CryptoStorage.prototype._storage = function() {\n    if (!CryptoStorage._storageDriver) {\n      CryptoStorage.startStorageSystem();\n    }\n    return CryptoStorage._storageDriver;\n  };\n\n  CryptoStorage._storageDriver = null;\n\n  CryptoStorage.startStorageSystem = function(driver) {\n    if (!driver) {\n      throw new Error('The driver parameter cannot be empty.');\n    }\n    return this._storageDriver = driver;\n  };\n\n  return CryptoStorage;\n\n})();\n\nmodule.exports = CryptoStorage;\n\n\n},{\"config\":1,\"keys\":5,\"nacl\":9}],3:[function(require,module,exports){\nvar KeyRatchet, Nacl;\n\nNacl = require('nacl');\n\nKeyRatchet = (function() {\n  KeyRatchet.prototype.lastKey = null;\n\n  KeyRatchet.prototype.confirmedKey = null;\n\n  KeyRatchet.prototype.nextKey = null;\n\n  KeyRatchet.prototype._roles = ['lastKey', 'confirmedKey', 'nextKey'];\n\n  function KeyRatchet(id, keyRing, firstKey) {\n    var i, len, ref, s;\n    this.id = id;\n    this.keyRing = keyRing;\n    if (firstKey == null) {\n      firstKey = null;\n    }\n    if (!(this.id && this.keyRing)) {\n      throw new Error('KeyRatchet - missing params');\n    }\n    ref = this._roles;\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      this[s] = this.keyRing.getKey(this.keyTag(s));\n    }\n    if (firstKey) {\n      this.startRatchet(firstKey);\n    }\n  }\n\n  KeyRatchet.prototype.keyTag = function(role) {\n    return role + \"_\" + this.id;\n  };\n\n  KeyRatchet.prototype.storeKey = function(role) {\n    return this.keyRing.saveKey(this.keyTag(role), this[role]);\n  };\n\n  KeyRatchet.prototype.startRatchet = function(firstKey) {\n    var i, k, len, ref;\n    ref = ['confirmedKey', 'lastKey'];\n    for (i = 0, len = ref.length; i < len; i++) {\n      k = ref[i];\n      if (!this[k]) {\n        this[k] = firstKey;\n        this.storeKey(k);\n      }\n    }\n    if (!this.nextKey) {\n      this.nextKey = Nacl.makeKeyPair();\n      return this.storeKey('nextKey');\n    }\n  };\n\n  KeyRatchet.prototype.pushKey = function(newKey) {\n    var i, len, ref, results, s;\n    this.lastKey = this.confirmedKey;\n    this.confirmedKey = this.nextKey;\n    this.nextKey = newKey;\n    ref = this._roles;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      results.push(this.storeKey(s));\n    }\n    return results;\n  };\n\n  KeyRatchet.prototype.confKey = function(newConfirmedKey) {\n    var i, len, ref, s;\n    if ((this.confirmedKey != null) && this.confirmedKey.equal(newConfirmedKey)) {\n      return false;\n    }\n    this.lastKey = this.confirmedKey;\n    this.confirmedKey = newConfirmedKey;\n    ref = ['lastKey', 'confirmedKey'];\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      this.storeKey(s);\n    }\n    return true;\n  };\n\n  KeyRatchet.prototype.curKey = function() {\n    if (this.confirmedKey) {\n      return this.confirmedKey;\n    }\n    return this.lastKey;\n  };\n\n  KeyRatchet.prototype.h2LastKey = function() {\n    return Nacl.h2(this.lastKey.boxPk);\n  };\n\n  KeyRatchet.prototype.h2ConfirmedKey = function() {\n    return Nacl.h2(this.confirmedKey.boxPk);\n  };\n\n  KeyRatchet.prototype.h2NextKey = function() {\n    return Nacl.h2(this.nextKey.boxPk);\n  };\n\n  KeyRatchet.prototype.keyByHash = function(hash) {\n    var i, len, ref, s;\n    ref = this._roles;\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      if (Nacl.h2(this[s].boxPk) === hash) {\n        return this[s];\n      }\n    }\n  };\n\n  KeyRatchet.prototype.isNextKeyHash = function(hash) {\n    return this.h2NextKey().equal(hash);\n  };\n\n  KeyRatchet.prototype.toStr = function() {\n    return JSON.stringify(this).toBase64();\n  };\n\n  KeyRatchet.prototype.fromStr = function(str) {\n    return Utils.extend(this, JSON.parse(str.fromBase64()));\n  };\n\n  KeyRatchet.prototype.selfDestruct = function(overseerAuthorized) {\n    var i, len, ref, results, s;\n    if (!overseerAuthorized) {\n      return null;\n    }\n    ref = this._roles;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      results.push(this.keyRing.deleteKey(this.keyTag(s)));\n    }\n    return results;\n  };\n\n  return KeyRatchet;\n\n})();\n\nmodule.exports = KeyRatchet;\n\nif (window.__CRYPTO_DEBUG) {\n  window.KeyRatchet = KeyRatchet;\n}\n\n\n},{\"nacl\":9}],4:[function(require,module,exports){\nvar Config, CryptoStorage, KeyRing, Keys, Nacl, Utils,\n  hasProp = {}.hasOwnProperty;\n\nConfig = require('config');\n\nCryptoStorage = require('crypto_storage');\n\nKeys = require('keys');\n\nNacl = require('nacl');\n\nUtils = require('utils');\n\nKeyRing = (function() {\n  function KeyRing(id, strMasterKey) {\n    var key;\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    if (strMasterKey) {\n      key = Keys.fromString(strMasterKey);\n      this.storage = new CryptoStorage(key, id);\n    }\n    if (!this.storage) {\n      this.storage = new CryptoStorage(null, id);\n    }\n    this._ensureKeys();\n  }\n\n  KeyRing.prototype._ensureKeys = function() {\n    this._loadCommKey();\n    return this._loadGuestKeys();\n  };\n\n  KeyRing.prototype._loadCommKey = function() {\n    this.commKey = this.getKey('comm_key');\n    if (this.commKey) {\n      return;\n    }\n    this.commKey = Nacl.makeKeyPair();\n    return this.saveKey('comm_key', this.commKey);\n  };\n\n  KeyRing.prototype._loadGuestKeys = function() {\n    var j, len, r, ref, results;\n    this.registry = this.storage.get('guest_registry') || [];\n    this.guestKeys = {};\n    ref = this.registry;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      r = ref[j];\n      results.push(this.guestKeys[r] = this.storage.get(\"guest[\" + r + \"]\"));\n    }\n    return results;\n  };\n\n  KeyRing.prototype.commFromSeed = function(seed) {\n    this.commKey = Nacl.fromSeed(Nacl.encode_utf8(seed));\n    return this.storage.save('comm_key', this.commKey.toString());\n  };\n\n  KeyRing.prototype.commFromSecKey = function(rawSecKey) {\n    this.commKey = Nacl.fromSecretKey(rawSecKey);\n    return this.storage.save('comm_key', this.commKey.toString());\n  };\n\n  KeyRing.prototype.tagByHpk = function(hpk) {\n    var k, ref, v;\n    ref = this.guestKeys;\n    for (k in ref) {\n      if (!hasProp.call(ref, k)) continue;\n      v = ref[k];\n      if (hpk === Nacl.h2(v.fromBase64()).toBase64()) {\n        return k;\n      }\n    }\n  };\n\n  KeyRing.prototype.getMasterKey = function() {\n    return this.storage.storageKey.key2str('key');\n  };\n\n  KeyRing.prototype.getPubCommKey = function() {\n    return this.commKey.strPubKey();\n  };\n\n  KeyRing.prototype.saveKey = function(tag, key) {\n    this.storage.save(tag, key.toString());\n    return key;\n  };\n\n  KeyRing.prototype.getKey = function(tag) {\n    var k;\n    k = this.storage.get(tag);\n    if (k) {\n      return Keys.fromString(k);\n    } else {\n      return null;\n    }\n  };\n\n  KeyRing.prototype.deleteKey = function(tag) {\n    return this.storage.remove(tag);\n  };\n\n  KeyRing.prototype._addRegistry = function(strGuestTag) {\n    if (!strGuestTag) {\n      return null;\n    }\n    if (!(this.registry.indexOf(strGuestTag) > -1)) {\n      return this.registry.push(strGuestTag);\n    }\n  };\n\n  KeyRing.prototype._saveNewGuest = function(tag, pk) {\n    if (!(tag && pk)) {\n      return null;\n    }\n    this.storage.save(\"guest[\" + tag + \"]\", pk);\n    return this.storage.save('guest_registry', this.registry);\n  };\n\n  KeyRing.prototype._removeGuestRecord = function(tag) {\n    var i;\n    if (!tag) {\n      return null;\n    }\n    this.storage.remove(\"guest[\" + tag + \"]\");\n    i = this.registry.indexOf(tag);\n    if (i > -1) {\n      this.registry.splice(i, 1);\n      return this.storage.save('guest_registry', this.registry);\n    }\n  };\n\n  KeyRing.prototype.addGuest = function(strGuestTag, b64_pk) {\n    if (!(strGuestTag && b64_pk)) {\n      return null;\n    }\n    b64_pk = b64_pk.trimLines();\n    this._addRegistry(strGuestTag);\n    this.guestKeys[strGuestTag] = b64_pk;\n    return this._saveNewGuest(strGuestTag, b64_pk);\n  };\n\n  KeyRing.prototype.addTempGuest = function(strGuestTag, strPubKey) {\n    if (!(strGuestTag && strPubKey)) {\n      return null;\n    }\n    strPubKey = strPubKey.trimLines();\n    this.guestKeys[strGuestTag] = strPubKey;\n    return Utils.delay(Config.RELAY_SESSION_TIMEOUT, (function(_this) {\n      return function() {\n        return delete _this.guestKeys[strGuestTag];\n      };\n    })(this));\n  };\n\n  KeyRing.prototype.removeGuest = function(strGuestTag) {\n    if (!(strGuestTag && this.guestKeys[strGuestTag])) {\n      return null;\n    }\n    this.guestKeys[strGuestTag] = null;\n    delete this.guestKeys[strGuestTag];\n    return this._removeGuestRecord(strGuestTag);\n  };\n\n  KeyRing.prototype.getGuestKey = function(strGuestTag) {\n    if (!(strGuestTag && this.guestKeys[strGuestTag])) {\n      return null;\n    }\n    return new Keys({\n      boxPk: this.getGuestRecord(strGuestTag).fromBase64()\n    });\n  };\n\n  KeyRing.prototype.getGuestRecord = function(strGuestTag) {\n    if (!(strGuestTag && this.guestKeys[strGuestTag])) {\n      return null;\n    }\n    return this.guestKeys[strGuestTag];\n  };\n\n  KeyRing.prototype.selfDestruct = function(overseerAuthorized) {\n    var g, j, len, rcopy;\n    if (!overseerAuthorized) {\n      return null;\n    }\n    rcopy = this.registry.slice();\n    for (j = 0, len = rcopy.length; j < len; j++) {\n      g = rcopy[j];\n      this.removeGuest(g);\n    }\n    this.storage.remove('guest_registry');\n    this.storage.remove('comm_key');\n    return this.storage.selfDestruct(overseerAuthorized);\n  };\n\n  return KeyRing;\n\n})();\n\nmodule.exports = KeyRing;\n\nif (window.__CRYPTO_DEBUG) {\n  window.KeyRing = KeyRing;\n}\n\n\n},{\"config\":1,\"crypto_storage\":2,\"keys\":5,\"nacl\":9,\"utils\":13}],5:[function(require,module,exports){\nvar Keys, Utils,\n  hasProp = {}.hasOwnProperty;\n\nUtils = require('utils');\n\nKeys = (function() {\n  function Keys(hashKeys) {\n    if (!hashKeys) {\n      return;\n    }\n    Utils.extend(this, hashKeys);\n  }\n\n  Keys.prototype.toString = function() {\n    return JSON.stringify(this.constructor.keys2str(this));\n  };\n\n  Keys.fromString = function(strKeys) {\n    if (!strKeys) {\n      return null;\n    }\n    return this.str2keys(JSON.parse(strKeys.trimLines()));\n  };\n\n  Keys.prototype.key2str = function(strName) {\n    if (!(strName && (this[strName] != null))) {\n      return null;\n    }\n    return this[strName].toBase64();\n  };\n\n  Keys.prototype.strPubKey = function() {\n    return this.boxPk.toBase64();\n  };\n\n  Keys.prototype.strSecKey = function() {\n    return this.boxSk.toBase64();\n  };\n\n  Keys.prototype.equal = function(k) {\n    if (this.strPubKey() !== k.strPubKey()) {\n      return false;\n    }\n    if ((this.boxSk != null) !== (k.boxSk != null)) {\n      return false;\n    }\n    if (this.boxSk != null) {\n      return this.strSecKey() === k.strSecKey();\n    }\n    return true;\n  };\n\n  Keys.keys2str = function(objKey) {\n    var k, r, v;\n    r = new Keys();\n    for (k in objKey) {\n      if (!hasProp.call(objKey, k)) continue;\n      v = objKey[k];\n      r[k] = v.toBase64();\n    }\n    return r;\n  };\n\n  Keys.str2keys = function(strObj) {\n    var k, r, v;\n    r = new Keys();\n    for (k in strObj) {\n      if (!hasProp.call(strObj, k)) continue;\n      v = strObj[k];\n      r[k] = v.fromBase64();\n    }\n    return r;\n  };\n\n  return Keys;\n\n})();\n\nmodule.exports = Keys;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Keys = Keys;\n}\n\n\n},{\"utils\":13}],6:[function(require,module,exports){\nvar Config, KeyRing, MailBox, Nacl, Utils;\n\nConfig = require('config');\n\nKeyRing = require('keyring');\n\nNacl = require('nacl');\n\nUtils = require('utils');\n\nMailBox = (function() {\n  function MailBox(identity, strMasterKey) {\n    this.identity = identity;\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    this.keyRing = new KeyRing(this.identity, strMasterKey);\n    this.sessionKeys = {};\n    this.sessionRelay = {};\n    this.sessionTimeout = {};\n  }\n\n  MailBox.fromSeed = function(seed, id, strMasterKey) {\n    var mbx;\n    if (id == null) {\n      id = seed;\n    }\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    mbx = new MailBox(id, strMasterKey);\n    mbx.keyRing.commFromSeed(id);\n    mbx._hpk = null;\n    return mbx;\n  };\n\n  MailBox.fromSecKey = function(secKey, id, strMasterKey) {\n    var mbx;\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    mbx = new MailBox(id, strMasterKey);\n    mbx.keyRing.commFromSecKey(secKey);\n    mbx._hpk = null;\n    return mbx;\n  };\n\n  MailBox.prototype.hpk = function() {\n    if (this._hpk) {\n      return this._hpk;\n    }\n    return this._hpk = Nacl.h2(this.keyRing.commKey.boxPk);\n  };\n\n  MailBox.prototype.getPubCommKey = function() {\n    return this.keyRing.getPubCommKey();\n  };\n\n  MailBox.prototype.createSessionKey = function(sess_id) {\n    if (!sess_id) {\n      throw new Error('createSessionKey - no sess_id');\n    }\n    if (this.sessionKeys[sess_id] != null) {\n      return this.sessionKeys[sess_id];\n    }\n    this.sessionKeys[sess_id] = Nacl.makeKeyPair();\n    this.sessionTimeout[sess_id] = Utils.delay(Config.RELAY_SESSION_TIMEOUT, (function(_this) {\n      return function() {\n        _this.sessionKeys[sess_id] = null;\n        delete _this.sessionKeys[sess_id];\n        _this.sessionTimeout[sess_id] = null;\n        delete _this.sessionTimeout[sess_id];\n        _this.sessionRelay[sess_id] = null;\n        return delete _this.sessionRelay[sess_id];\n      };\n    })(this));\n    return this.sessionKeys[sess_id];\n  };\n\n  MailBox.prototype.rawEncodeMessage = function(msg, pkTo, skFrom) {\n    var nonce, r;\n    if (!((msg != null) && (pkTo != null) && (skFrom != null))) {\n      throw new Error('rawEncodeMessage: missing params');\n    }\n    nonce = this._makeNonce();\n    return r = {\n      nonce: nonce.toBase64(),\n      ctext: Nacl.use().crypto_box(this._parseData(msg), nonce, pkTo, skFrom).toBase64()\n    };\n  };\n\n  MailBox.prototype.rawDecodeMessage = function(nonce, ctext, pkFrom, skTo) {\n    var NC;\n    if (!((nonce != null) && (ctext != null) && (pkFrom != null) && (skTo != null))) {\n      throw new Error('rawEncodeMessage: missing params');\n    }\n    NC = Nacl.use();\n    return JSON.parse(NC.decode_utf8(NC.crypto_box_open(ctext, nonce, pkFrom, skTo)));\n  };\n\n  MailBox.prototype.encodeMessage = function(guest, msg, session, skTag) {\n    var gpk, sk;\n    if (session == null) {\n      session = false;\n    }\n    if (skTag == null) {\n      skTag = null;\n    }\n    if (!((guest != null) && (msg != null))) {\n      throw new Error('encodeMessage: missing params');\n    }\n    if ((gpk = this._gPk(guest)) == null) {\n      throw new Error(\"encodeMessage: don't know guest \" + guest);\n    }\n    sk = this._getSecretKey(guest, session, skTag);\n    return this.rawEncodeMessage(msg, gpk, sk);\n  };\n\n  MailBox.prototype.decodeMessage = function(guest, nonce, ctext, session, skTag) {\n    var gpk, sk;\n    if (session == null) {\n      session = false;\n    }\n    if (skTag == null) {\n      skTag = null;\n    }\n    if (!((guest != null) && (nonce != null) && (ctext != null))) {\n      throw new Error('decodeMessage: missing params');\n    }\n    if ((gpk = this._gPk(guest)) == null) {\n      throw new Error(\"decodeMessage: don't know guest \" + guest);\n    }\n    sk = this._getSecretKey(guest, session, skTag);\n    return this.rawDecodeMessage(nonce.fromBase64(), ctext.fromBase64(), gpk, sk);\n  };\n\n  MailBox.prototype.connectToRelay = function(relay) {\n    return relay.openConnection().then((function(_this) {\n      return function() {\n        return relay.connectMailbox(_this).then(function() {\n          return _this.lastRelay = relay;\n        });\n      };\n    })(this));\n  };\n\n  MailBox.prototype.sendToVia = function(guest, relay, msg) {\n    return this.connectToRelay(relay).then((function(_this) {\n      return function() {\n        return _this.relaySend(guest, msg, relay);\n      };\n    })(this));\n  };\n\n  MailBox.prototype.getRelayMessages = function(relay) {\n    return this.connectToRelay(relay).then((function(_this) {\n      return function() {\n        return _this.relayMessages();\n      };\n    })(this));\n  };\n\n  MailBox.prototype.relayCount = function() {\n    if (!this.lastRelay) {\n      throw new Error('relayCount - no open relay');\n    }\n    return this.lastRelay.count(this).then((function(_this) {\n      return function() {\n        return _this.count = parseInt(_this.lastRelay.result);\n      };\n    })(this));\n  };\n\n  MailBox.prototype.relaySend = function(guest, msg) {\n    var encMsg;\n    if (!this.lastRelay) {\n      throw new Error('mbx: relaySend - no open relay');\n    }\n    encMsg = this.encodeMessage(guest, msg);\n    this.lastMsg = encMsg;\n    return this.lastRelay.upload(this, Nacl.h2(this._gPk(guest)), encMsg);\n  };\n\n  MailBox.prototype.relayMessages = function() {\n    if (!this.lastRelay) {\n      throw new Error('relayMessages - no open relay');\n    }\n    return this.lastRelay.download(this).then((function(_this) {\n      return function() {\n        var emsg, j, len, ref, results, tag;\n        _this.lastDownload = [];\n        ref = _this.lastRelay.result;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          emsg = ref[j];\n          if ((tag = _this.keyRing.tagByHpk(emsg.from))) {\n            emsg['fromTag'] = tag;\n            emsg['msg'] = _this.decodeMessage(tag, emsg.nonce, emsg.data);\n            if (emsg['msg'] != null) {\n              delete emsg.data;\n            }\n          }\n          results.push(_this.lastDownload.push(emsg));\n        }\n        return results;\n      };\n    })(this));\n  };\n\n  MailBox.prototype.relayNonceList = function() {\n    if (!this.lastDownload) {\n      throw new Error('relayNonceList - no metadata');\n    }\n    return Utils.map(this.lastDownload, function(i) {\n      return i.nonce;\n    });\n  };\n\n  MailBox.prototype.relayDelete = function(list) {\n    if (!this.lastRelay) {\n      throw new Error('relayDelete - no open relay');\n    }\n    return this.lastRelay[\"delete\"](this, list);\n  };\n\n  MailBox.prototype.clean = function(r) {\n    return this.getRelayMessages(r).then((function(_this) {\n      return function() {\n        return _this.relayDelete(_this.relayNonceList());\n      };\n    })(this));\n  };\n\n  MailBox.prototype.selfDestruct = function(overseerAuthorized) {\n    if (!overseerAuthorized) {\n      return null;\n    }\n    return this.keyRing.selfDestruct(overseerAuthorized);\n  };\n\n  MailBox.prototype._gKey = function(strId) {\n    if (!strId) {\n      return null;\n    }\n    return this.keyRing.getGuestKey(strId);\n  };\n\n  MailBox.prototype._gPk = function(strId) {\n    var ref;\n    if (!strId) {\n      return null;\n    }\n    return (ref = this._gKey(strId)) != null ? ref.boxPk : void 0;\n  };\n\n  MailBox.prototype._gHpk = function(strId) {\n    if (!strId) {\n      return null;\n    }\n    return Nacl.h2(this._gPk(strId));\n  };\n\n  MailBox.prototype._getSecretKey = function(guest, session, skTag) {\n    if (!skTag) {\n      if (session) {\n        return this.sessionKeys[guest].boxSk;\n      } else {\n        return this.keyRing.commKey.boxSk;\n      }\n    } else {\n      return this._gPk(skTag);\n    }\n  };\n\n  MailBox.prototype._parseData = function(data) {\n    if (Utils.type(data) === 'Uint8Array') {\n      return data;\n    }\n    return Nacl.use().encode_utf8(JSON.stringify(data));\n  };\n\n  MailBox.prototype._makeNonce = function(time) {\n    var bytes, i, j, k, nonce, ref;\n    if (time == null) {\n      time = parseInt(Date.now() / 1000);\n    }\n    nonce = Nacl.use().crypto_box_random_nonce();\n    if (!((nonce != null) && nonce.length === 24)) {\n      throw new Error('RNG failed, try again?');\n    }\n    bytes = Utils.itoa(time);\n    for (i = j = 0; j <= 7; i = ++j) {\n      nonce[i] = 0;\n    }\n    for (i = k = 0, ref = bytes.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n      nonce[8 - bytes.length + i] = bytes[i];\n    }\n    return nonce;\n  };\n\n  return MailBox;\n\n})();\n\nmodule.exports = MailBox;\n\nif (window.__CRYPTO_DEBUG) {\n  window.MailBox = MailBox;\n}\n\n\n},{\"config\":1,\"keyring\":4,\"nacl\":9,\"utils\":13}],7:[function(require,module,exports){\nmodule.exports = {\n  Utils: require('utils'),\n  Mixins: require('mixins'),\n  Nacl: require('nacl'),\n  Keys: require('keys'),\n  SimpleStorageDriver: require('test_driver'),\n  CryptoStorage: require('crypto_storage'),\n  KeyRing: require('keyring'),\n  MailBox: require('mailbox'),\n  Relay: require('relay'),\n  RachetBox: require('rachetbox'),\n  Config: require('config'),\n  startStorageSystem: function(storeImpl) {\n    return this.CryptoStorage.startStorageSystem(storeImpl);\n  },\n  setAjaxImpl: function(ajaxImpl) {\n    return this.Utils.setAjaxImpl(ajaxImpl);\n  }\n};\n\nif (window) {\n  window.glow = module.exports;\n}\n\n\n},{\"config\":1,\"crypto_storage\":2,\"keyring\":4,\"keys\":5,\"mailbox\":6,\"mixins\":8,\"nacl\":9,\"rachetbox\":10,\"relay\":11,\"test_driver\":12,\"utils\":13}],8:[function(require,module,exports){\nvar C, Utils, j, len, ref;\n\nUtils = require('utils');\n\nUtils.include(String, {\n  toCodeArray: function() {\n    var j, len, results, s;\n    results = [];\n    for (j = 0, len = this.length; j < len; j++) {\n      s = this[j];\n      results.push(s.charCodeAt());\n    }\n    return results;\n  },\n  toUTF8: function() {\n    return unescape(encodeURIComponent(this));\n  },\n  fromUTF8: function() {\n    return decodeURIComponent(escape(this));\n  },\n  toUint8Array: function() {\n    return new Uint8Array(this.toUTF8().toCodeArray());\n  },\n  toUint8ArrayRaw: function() {\n    return new Uint8Array(this.toCodeArray());\n  },\n  fromBase64: function() {\n    return new Uint8Array((atob(this)).toCodeArray());\n  },\n  trimLines: function() {\n    return this.replace('\\r\\n', '').replace('\\n', '').replace('\\r', '');\n  }\n});\n\nref = [Array, Uint8Array, Uint16Array];\nfor (j = 0, len = ref.length; j < len; j++) {\n  C = ref[j];\n  Utils.include(C, {\n    fromCharCodes: function() {\n      var c;\n      return ((function() {\n        var k, len1, results;\n        results = [];\n        for (k = 0, len1 = this.length; k < len1; k++) {\n          c = this[k];\n          results.push(String.fromCharCode(c));\n        }\n        return results;\n      }).call(this)).join('');\n    },\n    toBase64: function() {\n      return btoa(this.fromCharCodes());\n    },\n    xorWith: function(a) {\n      var c, i;\n      if (this.length !== a.length) {\n        return null;\n      }\n      return new Uint8Array((function() {\n        var k, len1, results;\n        results = [];\n        for (i = k = 0, len1 = this.length; k < len1; i = ++k) {\n          c = this[i];\n          results.push(c ^ a[i]);\n        }\n        return results;\n      }).call(this));\n    },\n    equal: function(a2) {\n      var i, k, len1, v;\n      if (this.length !== a2.length) {\n        return false;\n      }\n      for (i = k = 0, len1 = this.length; k < len1; i = ++k) {\n        v = this[i];\n        if (v !== a2[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nUtils.include(Uint8Array, {\n  concat: function(anotherArray) {\n    var tmp;\n    tmp = new Uint8Array(this.byteLength + anotherArray.byteLength);\n    tmp.set(new Uint8Array(this), 0);\n    tmp.set(anotherArray, this.byteLength);\n    return tmp;\n  },\n  fillWith: function(val) {\n    var i, k, len1, v;\n    for (i = k = 0, len1 = this.length; k < len1; i = ++k) {\n      v = this[i];\n      this[i] = val;\n    }\n    return this;\n  }\n});\n\nmodule.exports = {};\n\n\n},{\"utils\":13}],9:[function(require,module,exports){\nvar Keys, Nacl, Utils, js_nacl;\n\nif (typeof nacl_factory !== \"undefined\" && nacl_factory !== null) {\n  js_nacl = nacl_factory;\n} else {\n  js_nacl = require('js-nacl');\n}\n\nKeys = require('keys');\n\nUtils = require('utils');\n\nNacl = (function() {\n  function Nacl() {}\n\n  Nacl.HEAP_SIZE = Math.pow(2, 23);\n\n  Nacl._instance = null;\n\n  Nacl._unloadTimer = null;\n\n  Nacl.use = function() {\n    if (this._unloadTimer) {\n      clearTimeout(this._unloadTimer);\n    }\n    this._unloadTimer = setTimeout((function() {\n      return Nacl.unload();\n    }), 15 * 1000);\n    if (!window.__naclInstance) {\n      window.__naclInstance = js_nacl.instantiate(this.HEAP_SIZE);\n    }\n    return window.__naclInstance;\n  };\n\n  Nacl.unload = function() {\n    this._unloadTimer = null;\n    window.__naclInstance = null;\n    return delete window.__naclInstance;\n  };\n\n  Nacl.makeSecretKey = function() {\n    return new Keys({\n      key: this.use().random_bytes(this.use().crypto_secretbox_KEYBYTES)\n    });\n  };\n\n  Nacl.random = function(size) {\n    if (size == null) {\n      size = 32;\n    }\n    return this.use().random_bytes(size);\n  };\n\n  Nacl.makeKeyPair = function() {\n    return new Keys(this.use().crypto_box_keypair());\n  };\n\n  Nacl.fromSecretKey = function(raw_sk) {\n    return new Keys(this.use().crypto_box_keypair_from_raw_sk(raw_sk));\n  };\n\n  Nacl.fromSeed = function(seed) {\n    return new Keys(this.use().crypto_box_keypair_from_seed(seed));\n  };\n\n  Nacl.sha256 = function(data) {\n    return this.use().crypto_hash_sha256(data);\n  };\n\n  Nacl.to_hex = function(data) {\n    return this.use().to_hex(data);\n  };\n\n  Nacl.from_hex = function(data) {\n    return this.use().from_hex(data);\n  };\n\n  Nacl.encode_utf8 = function(data) {\n    return this.use().encode_utf8(data);\n  };\n\n  Nacl.decode_utf8 = function(data) {\n    return this.use().decode_utf8(data);\n  };\n\n  Nacl.h2 = function(str) {\n    var tmp;\n    if (Utils.type(str) === 'String') {\n      str = str.toUint8ArrayRaw();\n    }\n    tmp = new Uint8Array(32 + str.length);\n    tmp.fillWith(0);\n    tmp.set(str, 32);\n    return this.sha256(this.sha256(tmp));\n  };\n\n  Nacl.h2_64 = function(b64str) {\n    return Nacl.h2(b64str.fromBase64()).toBase64();\n  };\n\n  return Nacl;\n\n})();\n\nmodule.exports = Nacl;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Nacl = Nacl;\n}\n\n\n},{\"js-nacl\":undefined,\"keys\":5,\"utils\":13}],10:[function(require,module,exports){\nvar KeyRatchet, KeyRing, Keys, Mailbox, Nacl, RatchetBox, Utils,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nUtils = require('utils');\n\nNacl = require('nacl');\n\nKeys = require('keys');\n\nKeyRing = require('keyring');\n\nKeyRatchet = require('keyratchet');\n\nMailbox = require('mailbox');\n\nRatchetBox = (function(superClass) {\n  extend(RatchetBox, superClass);\n\n  function RatchetBox() {\n    return RatchetBox.__super__.constructor.apply(this, arguments);\n  }\n\n  RatchetBox.prototype._loadRatchets = function(guest) {\n    var gHpk;\n    gHpk = this._gHpk(guest).toBase64();\n    this.krLocal = new KeyRatchet(\"local_\" + gHpk + \"_for_\" + (this.hpk().toBase64()), this.keyRing, this.keyRing.commKey);\n    return this.krGuest = new KeyRatchet(\"guest_\" + gHpk + \"_for_\" + (this.hpk().toBase64()), this.keyRing, this.keyRing.getGuestKey(guest));\n  };\n\n  RatchetBox.prototype.relaySend = function(guest, m) {\n    var encMsg, msg;\n    if (!this.lastRelay) {\n      throw new Error('rbx: relaySend - no open relay');\n    }\n    if (!(guest && m)) {\n      throw new Error('rbx: relaySend - missing params');\n    }\n    this._loadRatchets(guest);\n    msg = {\n      org_msg: m\n    };\n    if (m.got_key == null) {\n      msg['nextKey'] = this.krLocal.nextKey.strPubKey();\n    }\n    if (m.got_key == null) {\n      encMsg = this.rawEncodeMessage(msg, this.krGuest.confirmedKey.boxPk, this.krLocal.confirmedKey.boxSk);\n      this.lastMsg = encMsg;\n    } else {\n      encMsg = this.rawEncodeMessage(msg, this.krGuest.lastKey.boxPk, this.krLocal.confirmedKey.boxSk);\n    }\n    return this.lastRelay.upload(this, Nacl.h2(this._gPk(guest)), encMsg);\n  };\n\n  RatchetBox.prototype._tryKeypair = function(nonce, ctext, pk, sk) {\n    var e, error;\n    try {\n      return this.rawDecodeMessage(nonce.fromBase64(), ctext.fromBase64(), pk, sk);\n    } catch (error) {\n      e = error;\n      return null;\n    }\n  };\n\n  RatchetBox.prototype.decodeMessage = function(guest, nonce, ctext, session, skTag) {\n    var i, j, keyPairs, kp, len, r;\n    if (session == null) {\n      session = false;\n    }\n    if (skTag == null) {\n      skTag = null;\n    }\n    if (session) {\n      return RatchetBox.__super__.decodeMessage.call(this, guest, nonce, ctext, session, skTag);\n    }\n    if (!((guest != null) && (nonce != null) && (ctext != null))) {\n      throw new Error('decodeMessage: missing params');\n    }\n    this._loadRatchets(guest);\n    keyPairs = [[this.krGuest.confirmedKey.boxPk, this.krLocal.confirmedKey.boxSk], [this.krGuest.lastKey.boxPk, this.krLocal.lastKey.boxSk], [this.krGuest.confirmedKey.boxPk, this.krLocal.lastKey.boxSk], [this.krGuest.lastKey.boxPk, this.krLocal.confirmedKey.boxSk]];\n    for (i = j = 0, len = keyPairs.length; j < len; i = ++j) {\n      kp = keyPairs[i];\n      r = this._tryKeypair(nonce, ctext, kp[0], kp[1]);\n      if (r != null) {\n        return r;\n      }\n    }\n    console.log('RatchetBox decryption failed: message from unknown guest or ratchet out of sync');\n    return null;\n  };\n\n  RatchetBox.prototype.relayMessages = function() {\n    return RatchetBox.__super__.relayMessages.call(this).then((function(_this) {\n      return function() {\n        var j, len, m, ref, ref1, ref2, ref3, sendConfs, sendNext;\n        sendConfs = [];\n        ref = _this.lastDownload;\n        for (j = 0, len = ref.length; j < len; j++) {\n          m = ref[j];\n          if (!m.fromTag) {\n            continue;\n          }\n          _this._loadRatchets(m.fromTag);\n          if (((ref1 = m.msg) != null ? ref1.nextKey : void 0) != null) {\n            if (_this.krGuest.confKey(new Keys({\n              boxPk: m.msg.nextKey.fromBase64()\n            }))) {\n              sendConfs.push({\n                toTag: m.fromTag,\n                key: m.msg.nextKey,\n                msg: {\n                  got_key: Nacl.h2_64(m.msg.nextKey)\n                }\n              });\n            }\n          }\n          if (((ref2 = m.msg) != null ? (ref3 = ref2.org_msg) != null ? ref3.got_key : void 0 : void 0) != null) {\n            m.msg = m.msg.org_msg;\n            if (_this.krLocal.isNextKeyHash(m.msg.got_key.fromBase64())) {\n              _this.krLocal.pushKey(Nacl.makeKeyPair());\n            }\n            m.msg = null;\n          }\n          if (m.msg != null) {\n            m.msg = m.msg.org_msg;\n          }\n        }\n        sendNext = function() {\n          var sc;\n          if (sendConfs.length > 0) {\n            sc = sendConfs.shift();\n            return _this.relaySend(sc.toTag, sc.msg).then(function() {\n              return sendNext();\n            });\n          }\n        };\n        return sendNext();\n      };\n    })(this));\n  };\n\n  RatchetBox.prototype.selfDestruct = function(overseerAuthorized, withRatchet) {\n    var guest, j, len, ref;\n    if (withRatchet == null) {\n      withRatchet = false;\n    }\n    if (!overseerAuthorized) {\n      return;\n    }\n    if (withRatchet) {\n      ref = this.keyRing.registry;\n      for (j = 0, len = ref.length; j < len; j++) {\n        guest = ref[j];\n        this._loadRatchets(guest);\n        this.krLocal.selfDestruct(withRatchet);\n        this.krGuest.selfDestruct(withRatchet);\n      }\n    }\n    return RatchetBox.__super__.selfDestruct.call(this, overseerAuthorized);\n  };\n\n  return RatchetBox;\n\n})(Mailbox);\n\nmodule.exports = RatchetBox;\n\nif (window.__CRYPTO_DEBUG) {\n  window.RatchetBox = RatchetBox;\n}\n\n\n},{\"keyratchet\":3,\"keyring\":4,\"keys\":5,\"mailbox\":6,\"nacl\":9,\"utils\":13}],11:[function(require,module,exports){\nvar Config, Keys, Nacl, Relay, Utils,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nConfig = require('config');\n\nKeys = require('keys');\n\nNacl = require('nacl');\n\nUtils = require('utils');\n\nRelay = (function() {\n  function Relay(url) {\n    this.url = url != null ? url : null;\n    this._ajax = bind(this._ajax, this);\n    this._resetState();\n    this.lastError = null;\n    this.RELAY_COMMANDS = ['count', 'upload', 'download', 'delete'];\n  }\n\n  Relay.prototype.openConnection = function() {\n    return this.getServerToken().then((function(_this) {\n      return function() {\n        return _this.getServerKey();\n      };\n    })(this));\n  };\n\n  Relay.prototype.getServerToken = function() {\n    if (!this.url) {\n      throw new Error('getServerToken - no url');\n    }\n    this.lastError = null;\n    if (!this.clientToken) {\n      this.clientToken = Nacl.random(Config.RELAY_TOKEN_LEN);\n    }\n    if (this.clientToken && this.clientToken.length !== Config.RELAY_TOKEN_LEN) {\n      throw new Error(\"Token must be \" + Config.RELAY_TOKEN_LEN + \" bytes\");\n    }\n    return this._ajax('start_session', this.clientToken.toBase64()).then((function(_this) {\n      return function(data) {\n        var lines;\n        lines = _this._processData(data);\n        _this.relayToken = lines[0].fromBase64();\n        _this.diff = lines.length === 2 ? parseInt(lines[1]) : 0;\n        _this._scheduleExpireSession(Config.RELAY_TOKEN_TIMEOUT);\n        if (_this.diff > 4) {\n          console.log(\"Relay \" + _this.url + \" requested difficulty \" + _this.diff + \". Session handshake may take longer.\");\n        }\n        if (_this.diff > 16) {\n          return console.log(\"Attempting handshake at difficulty \" + _this.diff + \"! This may take a while\");\n        }\n      };\n    })(this));\n  };\n\n  Relay.prototype.getServerKey = function() {\n    var handshake, nonce, sessionHandshake;\n    if (!(this.url && this.clientToken && this.relayToken)) {\n      throw new Error('getServerKey - missing params');\n    }\n    this.lastError = null;\n    this.h2ClientToken = Nacl.h2(this.clientToken).toBase64();\n    handshake = this.clientToken.concat(this.relayToken);\n    if (this.diff === 0) {\n      sessionHandshake = Nacl.h2(handshake).toBase64();\n    } else {\n      nonce = Nacl.random(32);\n      while (!Utils.arrayZeroBits(Nacl.h2(handshake.concat(nonce)), this.diff)) {\n        nonce = Nacl.random(32);\n      }\n      sessionHandshake = nonce.toBase64();\n    }\n    return this._ajax('verify_session', this.h2ClientToken + \"\\r\\n\" + sessionHandshake + \"\\r\\n\").then((function(_this) {\n      return function(d) {\n        var relayPk;\n        relayPk = d.fromBase64();\n        _this.relayKey = new Keys({\n          boxPk: relayPk\n        });\n        return _this.online = true;\n      };\n    })(this));\n  };\n\n  Relay.prototype.connectMailbox = function(mbx) {\n    var clientTemp, h2Sign, inner, maskedClientTempPk, outer, relayId, sign;\n    if (!((mbx != null) && this.online && (this.relayKey != null) && (this.url != null))) {\n      throw new Error('connectMailbox - missing params');\n    }\n    this.lastError = null;\n    relayId = \"relay_\" + this.url;\n    clientTemp = mbx.createSessionKey(relayId).boxPk;\n    mbx.keyRing.addTempGuest(relayId, this.relayKey.strPubKey());\n    delete this.relayKey;\n    maskedClientTempPk = clientTemp.toBase64();\n    sign = clientTemp.concat(this.relayToken).concat(this.clientToken);\n    h2Sign = Nacl.h2(sign);\n    inner = mbx.encodeMessage(relayId, h2Sign);\n    inner['pub_key'] = mbx.keyRing.getPubCommKey();\n    outer = mbx.encodeMessage(\"relay_\" + this.url, inner, true);\n    return this._ajax('prove', (this.h2ClientToken + \"\\r\\n\") + (maskedClientTempPk + \"\\r\\n\") + (outer.nonce + \"\\r\\n\") + (\"\" + outer.ctext)).then((function(_this) {\n      return function(d) {};\n    })(this));\n  };\n\n  Relay.prototype.runCmd = function(cmd, mbx, params) {\n    var data, message;\n    if (params == null) {\n      params = null;\n    }\n    if (!((cmd != null) && (mbx != null))) {\n      throw new Error('runCmd - missing params');\n    }\n    if (indexOf.call(this.RELAY_COMMANDS, cmd) < 0) {\n      throw new Error(\"Relay \" + this.url + \" doesn't support \" + cmd);\n    }\n    data = {\n      cmd: cmd\n    };\n    if (params) {\n      data = Utils.extend(data, params);\n    }\n    message = mbx.encodeMessage(\"relay_\" + this.url, data, true);\n    return this._ajax('command', ((mbx.hpk().toBase64()) + \"\\r\\n\") + (message.nonce + \"\\r\\n\") + (\"\" + message.ctext)).then((function(_this) {\n      return function(d) {\n        if (cmd === 'upload') {\n          return;\n        }\n        if (d == null) {\n          throw new Error(_this.url + \" - \" + cmd + \" error\");\n        }\n        if (cmd === 'count' || cmd === 'download') {\n          return _this.result = _this._processResponse(d, mbx, cmd);\n        } else {\n          return _this.result = JSON.parse(d);\n        }\n      };\n    })(this));\n  };\n\n  Relay.prototype._processResponse = function(d, mbx, cmd) {\n    var ctext, datain, nonce;\n    datain = this._processData(d);\n    if (datain.length !== 2) {\n      throw new Error(this.url + \" - \" + cmd + \": Bad response\");\n    }\n    nonce = datain[0];\n    ctext = datain[1];\n    return mbx.decodeMessage(\"relay_\" + this.url, nonce, ctext, true);\n  };\n\n  Relay.prototype._processData = function(d) {\n    var datain;\n    datain = d.split('\\r\\n');\n    if (!(datain.length >= 2)) {\n      datain = d.split('\\n');\n    }\n    return datain;\n  };\n\n  Relay.prototype.count = function(mbx) {\n    return this.runCmd('count', mbx);\n  };\n\n  Relay.prototype.upload = function(mbx, toHpk, payload) {\n    return this.runCmd('upload', mbx, {\n      to: toHpk.toBase64(),\n      payload: payload\n    });\n  };\n\n  Relay.prototype.download = function(mbx) {\n    return this.runCmd('download', mbx);\n  };\n\n  Relay.prototype[\"delete\"] = function(mbx, nonceList) {\n    return this.runCmd('delete', mbx, {\n      payload: nonceList\n    });\n  };\n\n  Relay.prototype._resetState = function() {\n    this.clientToken = null;\n    this.online = false;\n    this.relayToken = null;\n    this.relayKey = null;\n    return this.clientTokenExpiration = null;\n  };\n\n  Relay.prototype._scheduleExpireSession = function(tout) {\n    if (this.clientTokenExpiration) {\n      clearTimeout(this.clientTokenExpiration);\n    }\n    return this.clientTokenExpiration = setTimeout((function(_this) {\n      return function() {\n        return _this._resetState();\n      };\n    })(this), tout);\n  };\n\n  Relay.prototype._ajax = function(cmd, data) {\n    return Utils.ajax(this.url + \"/\" + cmd, data);\n  };\n\n  return Relay;\n\n})();\n\nmodule.exports = Relay;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Relay = Relay;\n}\n\n\n},{\"config\":1,\"keys\":5,\"nacl\":9,\"utils\":13}],12:[function(require,module,exports){\nvar SimpleTestDriver;\n\nSimpleTestDriver = (function() {\n  SimpleTestDriver.prototype._state = null;\n\n  SimpleTestDriver.prototype._key_tag = function(key) {\n    return this._root_tag + \".\" + key;\n  };\n\n  function SimpleTestDriver(root, sourceData) {\n    if (root == null) {\n      root = 'storage.';\n    }\n    if (sourceData == null) {\n      sourceData = null;\n    }\n    this._root_tag = \"__glow.\" + root;\n    this._load(sourceData);\n  }\n\n  SimpleTestDriver.prototype.get = function(key) {\n    if (!this._state) {\n      this._load();\n    }\n    if (this._state[key]) {\n      return this._state[key];\n    } else {\n      return JSON.parse(localStorage.getItem(this._key_tag(key)));\n    }\n  };\n\n  SimpleTestDriver.prototype.set = function(key, value) {\n    if (!this._state) {\n      this._load();\n    }\n    this._state[key] = value;\n    localStorage.setItem(this._key_tag(key), JSON.stringify(value));\n    return this._persist();\n  };\n\n  SimpleTestDriver.prototype.remove = function(key) {\n    if (!this._state) {\n      this._load();\n    }\n    delete this._state[key];\n    localStorage.removeItem(this._key_tag(key));\n    return this._persist();\n  };\n\n  SimpleTestDriver.prototype._persist = function() {};\n\n  SimpleTestDriver.prototype._load = function(sourceData) {\n    if (sourceData == null) {\n      sourceData = null;\n    }\n    this._state = sourceData ? sourceData : {};\n    return console.log('INFO: SimpleTestDriver uses localStorage and should not be used in production for permanent key storage.');\n  };\n\n  return SimpleTestDriver;\n\n})();\n\nmodule.exports = SimpleTestDriver;\n\n\n},{}],13:[function(require,module,exports){\nvar Config, Utils;\n\nConfig = require('config');\n\nUtils = (function() {\n  function Utils() {}\n\n  Utils.extend = function(target, source) {\n    var key, val;\n    if (typeof $ !== \"undefined\" && $ !== null ? $.extend : void 0) {\n      return $.extend(target, source);\n    } else {\n      for (key in source) {\n        val = source[key];\n        if (source[key] !== void 0) {\n          target[key] = source[key];\n        }\n      }\n      return target;\n    }\n  };\n\n  Utils.map = function(array, func) {\n    if (typeof $ !== \"undefined\" && $ !== null ? $.map : void 0) {\n      return typeof $ !== \"undefined\" && $ !== null ? $.map(array, func) : void 0;\n    } else {\n      return Array.prototype.map.apply(array, [func]);\n    }\n  };\n\n  Utils.include = function(klass, mixin) {\n    return this.extend(klass.prototype, mixin);\n  };\n\n  Utils.type = function(obj) {\n    if (obj === void 0) {\n      return 'undefined';\n    }\n    if (obj === null) {\n      return 'null';\n    }\n    return Object.prototype.toString.call(obj).replace('[', '').replace(']', '').split(' ')[1];\n  };\n\n  Utils.ajaxImpl = null;\n\n  Utils.setAjaxImpl = function(ajaxImpl) {\n    return this.ajaxImpl = ajaxImpl;\n  };\n\n  Utils.ajax = function(url, data) {\n    if (this.ajaxImpl === null) {\n      if (typeof Q !== \"undefined\" && Q !== null ? Q.xhr : void 0) {\n        this.setAjaxImpl(function(url, data) {\n          return Q.xhr({\n            method: 'POST',\n            url: url,\n            headers: {\n              'Accept': 'text/plain',\n              'Content-Type': 'text/plain'\n            },\n            data: data,\n            responseType: 'text',\n            timeout: Config.RELAY_AJAX_TIMEOUT,\n            disableUploadProgress: true\n          }).then(function(response) {\n            return response.data;\n          });\n        });\n      } else if ((typeof $ !== \"undefined\" && $ !== null ? $.ajax : void 0) && (typeof $ !== \"undefined\" && $ !== null ? $.Deferred : void 0)) {\n        console.log('default ajax impl: setting to zepto with promises');\n        this.setAjaxImpl(function(url, data) {\n          return $.ajax({\n            url: url,\n            type: 'POST',\n            dataType: 'text',\n            timeout: Config.RELAY_AJAX_TIMEOUT,\n            context: this,\n            error: console.log,\n            contentType: 'text/plain',\n            data: data\n          });\n        });\n      } else {\n        throw new Error('ajax implementation not set; use q-xhr or $http');\n      }\n    }\n    return this.ajaxImpl(url, data);\n  };\n\n  Utils.delay = function(milliseconds, func) {\n    return setTimeout(func, milliseconds);\n  };\n\n  Utils.itoa = function(n) {\n    var floor, i, lg, pw, ref, top;\n    if (n <= 0) {\n      return new Uint8Array((function() {\n        var j, results;\n        results = [];\n        for (i = j = 0; j <= 7; i = ++j) {\n          results.push(0);\n        }\n        return results;\n      })());\n    }\n    ref = [Math.floor, Math.pow, Math.log], floor = ref[0], pw = ref[1], lg = ref[2];\n    top = floor(lg(n) / lg(256));\n    return new Uint8Array((function() {\n      var j, ref1, results;\n      results = [];\n      for (i = j = ref1 = top; ref1 <= 0 ? j <= 0 : j >= 0; i = ref1 <= 0 ? ++j : --j) {\n        results.push(floor(n / pw(256, i)) % 256);\n      }\n      return results;\n    })());\n  };\n\n  Utils.firstZeroBits = function(byte, n) {\n    return byte === ((byte >> n) << n);\n  };\n\n  Utils.arrayZeroBits = function(arr, diff) {\n    var a, i, j, ref, rmd;\n    rmd = diff;\n    for (i = j = 0, ref = 1 + diff / 8; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n      a = arr[i];\n      if (rmd <= 0) {\n        return true;\n      }\n      if (rmd > 8) {\n        rmd -= 8;\n        if (a > 0) {\n          return false;\n        }\n      } else {\n        return this.firstZeroBits(a, rmd);\n      }\n    }\n    return false;\n  };\n\n  Utils.logStack = function(err) {\n    var i, j, len, results, s, sl;\n    if (!err) {\n      err = new Error('stackLog');\n    }\n    s = err.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@').split('\\n');\n    results = [];\n    for (i = j = 0, len = s.length; j < len; i = ++j) {\n      sl = s[i];\n      results.push(console.log(i + \": \" + sl));\n    }\n    return results;\n  };\n\n  return Utils;\n\n})();\n\nmodule.exports = Utils;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Utils = Utils;\n}\n\n\n},{\"config\":1}]},{},[7])\n\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig  = require 'config'\nKeys = require 'keys'\nNacl = require 'nacl'\n\n# Secure local storage\nclass CryptoStorage\n  # Keys are tagged in local storage with a versioned prefix\n  tag: (strKey) ->\n    strKey and strKey + @root\n\n  # Changing roots allows different versions to keep separate storage areas\n  constructor: (@storageKey = null, r = null) ->\n    @root = if r then \".#{r}#{Config._DEF_ROOT}\" else Config._DEF_ROOT\n\n    # TODO: move storage key to hw and provide it in ctor call\n    unless @storageKey\n      @_loadKey()\n\n    # If we don't have a loaded storageKey, make a new one\n    unless @storageKey\n      @newKey()\n\n  _saveKey: ->\n    @_set Config._SKEY_TAG, @storageKey.toString()\n\n  _loadKey: ->\n    keyStr = @_get Config._SKEY_TAG\n    @setKey Keys.fromString keyStr if keyStr\n\n  # have to call with overseerAuthorized as true for extra safety\n  selfDestruct: (overseerAuthorized) ->\n    @_localRemove @tag Config._SKEY_TAG if overseerAuthorized\n\n  setKey: (objStorageKey) ->\n    @storageKey = objStorageKey\n    @_saveKey()\n\n  newKey: ->\n    @setKey Nacl.makeSecretKey()\n\n  # main storage functions\n  save: (strTag, data) ->\n    unless strTag and data # nothing to do if either is null\n      return null\n\n    n = Nacl.use()\n    # let's convert the data to JSON, then make that string a byte array\n    data = n.encode_utf8 JSON.stringify data\n\n    # each data field saved generates its own nonce\n    nonce = n.crypto_secretbox_random_nonce()\n    aCText = n.crypto_secretbox(data, nonce, @storageKey.key)\n\n    # save the chipher text and nonce for this save op\n    @_set strTag, aCText.toBase64()\n    @_set \"#{Config._NONCE_TAG}.#{strTag}\", nonce.toBase64()\n    # signal success\n    true\n\n  get: (strTag) ->\n    ct = @_get strTag # get cipher text by storage tag\n    return null unless ct # nothing to do without cipher text\n\n    nonce = @_get \"#{Config._NONCE_TAG}.#{strTag}\"\n    return null unless nonce # nothing to do without nonce\n\n    n = Nacl.use()\n    # covert cipher text to arrays from base64 in local storage\n    aPText = n.crypto_secretbox_open(\n      ct.fromBase64()\n      nonce.fromBase64()\n      @storageKey.key\n    )\n    # restore JSON string from plain text array and parse it\n    JSON.parse n.decode_utf8 aPText\n\n  remove: (strTag) ->\n    for tag in [strTag, \"#{Config._NONCE_TAG}.#{strTag}\"]\n      @_localRemove @tag tag\n    true\n\n  # Private access functions for tagged read/write\n  _get: (strTag) ->\n    @_localGet @tag strTag\n\n  _set: (strTag, strData) ->\n    return null unless strTag and strData\n    @_localSet (@tag strTag), strData\n    strData\n\n  # For testing we can keep the storage key in local storage\n  # Eventually we should move it to the device's user hardware storage\n  # That will fully secure local storage data\n  _localGet: (str) ->\n    @_storage().get(str) or null\n  _localSet: (str, data) ->\n    @_storage().set str, data\n  _localRemove: (str) ->\n    @_storage().remove str\n\n  _storage: () ->\n    if not CryptoStorage._storageDriver\n      CryptoStorage.startStorageSystem()\n    CryptoStorage._storageDriver\n\n  @_storageDriver = null\n\n  @startStorageSystem = (driver) ->\n    if not driver\n      throw new Error 'The driver parameter cannot be empty.'\n    @_storageDriver = driver\n\nmodule.exports = CryptoStorage\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nNacl = require 'nacl'\n\nclass KeyRatchet\n\n  # Last used key, we know other party has it\n  lastKey: null\n\n  # Confirmed key, we know other party just got it\n  confirmedKey: null\n\n  # Next key, we sending it to the other party. We\n  # do not know when/if it will confirm it\n  nextKey: null\n\n  _roles: ['lastKey', 'confirmedKey', 'nextKey']\n\n  constructor: (@id, @keyRing, firstKey = null) ->\n    throw new Error('KeyRatchet - missing params') unless @id and @keyRing\n    for s in @_roles\n      @[s] = @keyRing.getKey(@keyTag s)\n    @startRatchet firstKey if firstKey\n\n  keyTag: (role) ->\n    \"#{role}_#{@id}\"\n\n  storeKey: (role) ->\n    @keyRing.saveKey @keyTag(role), @[role]\n\n  startRatchet: (firstKey) ->\n    # If we dont have confirmed key to work with\n    # we have to start ratched with a default key\n    for k in ['confirmedKey', 'lastKey']\n      unless @[k]\n        @[k] = firstKey\n        @storeKey k\n\n    # create next ratchet key unless we already done so\n    unless @nextKey\n      @nextKey = Nacl.makeKeyPair()\n      @storeKey 'nextKey'\n\n  pushKey: (newKey) ->\n    @lastKey = @confirmedKey\n    @confirmedKey = @nextKey\n    @nextKey = newKey\n    @storeKey(s) for s in @_roles\n\n  confKey: (newConfirmedKey) ->\n    return false if @confirmedKey? and @confirmedKey.equal newConfirmedKey\n    # console.log \"Key confirmed: replacing in #{@id} | #{@confirmedKey.boxPk.toBase64()} with #{newConfirmedKey.boxPk.toBase64()}\"\n    @lastKey = @confirmedKey\n    @confirmedKey = newConfirmedKey\n    @storeKey(s) for s in ['lastKey', 'confirmedKey']\n    return true\n\n  curKey: ->\n    return @confirmedKey if @confirmedKey\n    return @lastKey\n\n  h2LastKey: -> Nacl.h2 @lastKey.boxPk\n  h2ConfirmedKey: -> Nacl.h2 @confirmedKey.boxPk\n  h2NextKey: -> Nacl.h2 @nextKey.boxPk\n\n  keyByHash: (hash) ->\n    for s in @_roles\n      return @[s] if Nacl.h2(@[s].boxPk) is hash\n\n  isNextKeyHash: (hash) ->\n    @h2NextKey().equal hash\n\n  toStr: -> JSON.stringify(@).toBase64()\n  fromStr: (str) -> Utils.extend @, JSON.parse(str.fromBase64())\n\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    for s in @_roles\n      @keyRing.deleteKey @keyTag s\n\nmodule.exports = KeyRatchet\nwindow.KeyRatchet = KeyRatchet if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig           = require 'config'\nCryptoStorage = require 'crypto_storage'\nKeys          = require 'keys'\nNacl          = require 'nacl'\nUtils         = require 'utils'\n\n# Manages the public keys of correspondents\nclass KeyRing\n  # storage master key arrives from HW storage\n  constructor: (id, strMasterKey = null) ->\n    if strMasterKey\n      key = Keys.fromString strMasterKey\n      @storage = new CryptoStorage(key, id)\n\n    @storage = new CryptoStorage(null, id) unless @storage\n    @_ensureKeys()\n\n  # make sure we have all basic keys created\n  _ensureKeys: ->\n    @_loadCommKey()\n    @_loadGuestKeys()\n\n  _loadCommKey: ->\n    @commKey = @getKey 'comm_key'\n    return if @commKey\n    @commKey = Nacl.makeKeyPair()\n    @saveKey 'comm_key', @commKey\n\n  _loadGuestKeys: ->\n    @registry = @storage.get('guest_registry') or []\n    @guestKeys = {}\n    for r in @registry\n      @guestKeys[r] = @storage.get(\"guest[#{r}]\")\n\n  commFromSeed: (seed) ->\n    @commKey = Nacl.fromSeed Nacl.encode_utf8 seed\n    @storage.save('comm_key', @commKey.toString())\n\n  commFromSecKey: (rawSecKey) ->\n    @commKey = Nacl.fromSecretKey rawSecKey\n    @storage.save('comm_key', @commKey.toString())\n\n  tagByHpk: (hpk) ->\n    for own k, v of @guestKeys\n      return k if hpk is Nacl.h2(v.fromBase64()).toBase64()\n\n  getMasterKey: ->\n    @storage.storageKey.key2str 'key' # to b64 string\n\n  getPubCommKey: ->\n    @commKey.strPubKey()\n\n  saveKey: (tag, key) ->\n    @storage.save(tag, key.toString())\n    key\n\n  getKey: (tag) ->\n    k = @storage.get(tag)\n    if k then Keys.fromString k else null\n\n  deleteKey: (tag) ->\n    @storage.remove tag\n\n  _addRegistry: (strGuestTag) ->\n    return null unless strGuestTag\n    @registry.push(strGuestTag) unless @registry.indexOf(strGuestTag) > -1\n\n  _saveNewGuest: (tag, pk) ->\n    return null unless tag and pk\n    @storage.save(\"guest[#{tag}]\", pk)\n    @storage.save('guest_registry', @registry)\n\n  _removeGuestRecord: (tag) ->\n    return null unless tag\n    @storage.remove(\"guest[#{tag}]\")\n    i = @registry.indexOf tag\n    if i > -1\n      @registry.splice(i, 1)\n      @storage.save('guest_registry', @registry)\n\n  addGuest: (strGuestTag, b64_pk) ->\n    return null unless strGuestTag and b64_pk\n    b64_pk = b64_pk.trimLines()\n    @_addRegistry strGuestTag\n    @guestKeys[strGuestTag] = b64_pk\n    @_saveNewGuest(strGuestTag, b64_pk)\n\n  addTempGuest: (strGuestTag,strPubKey) ->\n    return null unless strGuestTag and strPubKey\n    strPubKey = strPubKey.trimLines()\n    @guestKeys[strGuestTag] = strPubKey\n    Utils.delay Config.RELAY_SESSION_TIMEOUT, =>\n      delete @guestKeys[strGuestTag]\n\n  removeGuest: (strGuestTag) ->\n    return null unless strGuestTag and @guestKeys[strGuestTag]\n    @guestKeys[strGuestTag] = null # erase the pointer just in case\n    delete @guestKeys[strGuestTag]\n    @_removeGuestRecord strGuestTag\n\n  getGuestKey: (strGuestTag) ->\n    return null unless strGuestTag and @guestKeys[strGuestTag]\n    new Keys\n      boxPk: @getGuestRecord(strGuestTag).fromBase64()\n\n  getGuestRecord: (strGuestTag) ->\n    return null unless strGuestTag and @guestKeys[strGuestTag]\n    @guestKeys[strGuestTag]\n\n  # have to call with overseerAuthorized as true for extra safety\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    rcopy = @registry.slice()\n    @removeGuest g for g in rcopy\n    @storage.remove 'guest_registry'\n    @storage.remove 'comm_key'\n    @storage.selfDestruct(overseerAuthorized)\n\nmodule.exports = KeyRing\nwindow.KeyRing = KeyRing if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Keys represents a public/secret key pair object as generated by js-nacl\nUtils = require 'utils'\n\nclass Keys\n\n  # constructs an object from the hashKeys object passed to it, or creates an\n  # empty object.\n  constructor: (hashKeys) ->\n    return unless hashKeys\n    Utils.extend @, hashKeys\n\n  toString: ->\n    JSON.stringify @constructor.keys2str @\n\n  @fromString: (strKeys) ->\n    return null unless strKeys\n    @str2keys JSON.parse strKeys.trimLines()\n\n  key2str: (strName) ->\n    return null unless strName and @[strName]?\n    @[strName].toBase64()\n\n  strPubKey: ->\n    @boxPk.toBase64()\n\n  strSecKey: ->\n    @boxSk.toBase64()\n\n  equal: (k) ->\n    return false unless @strPubKey() is k.strPubKey()\n    return false if @boxSk? isnt k.boxSk?\n    return @strSecKey() is k.strSecKey() if @boxSk?\n    return true\n\n  # Convert obj with UInt8Array to obj with strings\n  @keys2str: (objKey) ->\n    r = new Keys()\n    for own k, v of objKey\n      r[k] = v.toBase64()\n    r\n\n  # Convert obj with strings to obj with UInt8Array\n  @str2keys: (strObj) ->\n    r = new Keys()\n    for own k, v of strObj\n      r[k] = v.fromBase64()\n    r\n\nmodule.exports  = Keys\nwindow.Keys = Keys if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig        = require 'config'\nKeyRing       = require 'keyring'\nNacl          = require 'nacl'\nUtils         = require 'utils'\n\n# Mailbox service to connect with the Zax relay service\nclass MailBox\n\n  # Creates a new client Mailbox that will represent an hpk mailbox on the\n  # relay. You can provide a friendly unique name to represent that Mailbox as\n  # an *identity*. That name should be unique locally, since it's used as a\n  # storage tag.\n\n  # If your client supports dedicated cryptographic storage, you can keep the\n  # master encryption key in that storage and provide it as strMasterKey.\n\n  # All Mailbox storage calls will be symmetrically encrypted with that key.\n  # Otherwise we will make a key for you, and save it in the same CryptoStorage\n  # as the rest of of the data.\n  constructor: (@identity, strMasterKey = null) ->\n    @keyRing = new KeyRing(@identity, strMasterKey)\n    @sessionKeys = {}\n    @sessionRelay = {}\n    @sessionTimeout = {}\n\n  # You can create a Mailbox where the secret identity key is derived from a\n  # well-known seed.\n  @fromSeed: (seed, id = seed, strMasterKey = null) ->\n    mbx = new MailBox(id, strMasterKey)\n    mbx.keyRing.commFromSeed(id)\n    mbx._hpk = null\n    return mbx\n\n  # You can also create a Mailbox if you already know the secret identity key\n  @fromSecKey: (secKey, id, strMasterKey = null) ->\n    mbx = new MailBox(id, strMasterKey)\n    mbx.keyRing.commFromSecKey(secKey)\n    mbx._hpk = null\n    return mbx\n\n  # --- Mailbox keys ---\n  # This is the HPK (hash of the public key) of your mailbox. This is what Zax\n  # Relays use as the universal address of your mailbox.\n  hpk: ->\n    return @_hpk if @_hpk\n    @_hpk = Nacl.h2(@keyRing.commKey.boxPk)\n\n  # This is your public identity and default communication key. Your\n  # correspondents can know it, whereas Relays do not need it (other than\n  # temporarily for internal use during the ownership proof)\n  getPubCommKey: ->\n    @keyRing.getPubCommKey()\n\n  # Each session with each Zax Relay creates its own temporary session keys\n  createSessionKey: (sess_id) ->\n    throw new Error('createSessionKey - no sess_id') unless sess_id\n    return @sessionKeys[sess_id] if @sessionKeys[sess_id]?\n    @sessionKeys[sess_id] = Nacl.makeKeyPair()\n\n    # Remove key material after it expires on the relay\n    @sessionTimeout[sess_id] = Utils.delay Config.RELAY_SESSION_TIMEOUT, =>\n      @sessionKeys[sess_id] = null\n      delete @sessionKeys[sess_id]\n\n      @sessionTimeout[sess_id] = null\n      delete @sessionTimeout[sess_id]\n\n      @sessionRelay[sess_id] = null\n      delete @sessionRelay[sess_id]\n\n    return @sessionKeys[sess_id]\n\n  # --- Low level encoding/decoding ---\n\n  rawEncodeMessage: (msg, pkTo, skFrom) ->\n    throw new Error('rawEncodeMessage: missing params') unless msg? and pkTo? and skFrom?\n    nonce = @_makeNonce()\n    return r =\n      nonce: nonce.toBase64()\n      ctext: Nacl.use().crypto_box(\n        @_parseData(msg)\n        nonce\n        pkTo\n        skFrom).toBase64()\n\n  rawDecodeMessage: (nonce, ctext, pkFrom, skTo) ->\n    throw new Error('rawEncodeMessage: missing params') unless nonce? and ctext? and pkFrom? and skTo?\n    NC = Nacl.use()\n    JSON.parse NC.decode_utf8 NC.crypto_box_open(ctext, nonce, pkFrom, skTo)\n\n  # Encodes a free-form object *msg* to the guest key of a guest already\n  # added to our keyring. If the session flag is set, we will look for keys in\n  # temporary, not the persistent collection of session keys. skTag lets you\n  # specifiy the secret key in a key ring\n  encodeMessage: (guest, msg, session = false, skTag = null) ->\n    throw new Error('encodeMessage: missing params') unless guest? and msg?\n    throw new Error(\"encodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk guest)?\n    sk = @_getSecretKey guest, session, skTag\n    @rawEncodeMessage msg, gpk, sk\n\n  # Decodes a ciphertext from a guest key already in our keyring with this\n  # nonce. If session flag is set, looks for keys in temporary, not the\n  # persistent collection of session keys. skTag (optional) lets you specify\n  # the secret key in a key ring\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    throw new Error('decodeMessage: missing params') unless guest? and nonce? and ctext?\n    throw new Error(\"decodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk guest)?\n    sk = @_getSecretKey guest, session, skTag\n    @rawDecodeMessage nonce.fromBase64(), ctext.fromBase64(), gpk, sk\n\n  # Establishes a session, exchanges temp keys and proves our ownership of this\n  # Mailbox to this specific relay. This is the first function to start\n  # communications with any relay.\n  connectToRelay: (relay) ->\n    relay.openConnection().then =>\n      relay.connectMailbox(@).then =>\n        @lastRelay = relay\n\n  # --- Initial communications ---\n  # If we are not connected to a relay, we can still send a message (free form\n  # object) to a specific guest in our keyring. This call will first establish\n  # a connection to a relay and then send the first message via that relay.\n  sendToVia: (guest, relay, msg) ->\n    @connectToRelay(relay).then =>\n      @relaySend(guest, msg, relay)\n\n  # If we are not connected to a relay, we can still get pending messages for\n  # us from that relay. This call will first establish a connection to a relay\n  # and download messages. @lastDownload will be populated with an array of\n  # messages and download meta-data about those messages.\n  getRelayMessages: (relay) ->\n    @connectToRelay(relay).then =>\n      @relayMessages()\n\n  # --- Established communication functions ---\n  # Once a connection with a relay is established there is no need to create\n  # new sessions. These 4 functions allow us to issue all 4 relay commands\n  # using previously established connections to a relay stored in @lastRelay\n\n  # Gets pending messages count and stores it in @count\n  relayCount: ->\n    throw new Error('relayCount - no open relay') unless @lastRelay\n    @lastRelay.count(@).then =>\n      @count = parseInt @lastRelay.result\n\n  # Sends a free-form object to a guest whose keys we already have in our\n  # keyring via @lastRelay\n  relaySend: (guest, msg) ->\n    throw new Error('mbx: relaySend - no open relay') unless @lastRelay\n    encMsg = @encodeMessage(guest, msg)\n    @lastMsg = encMsg\n    @lastRelay.upload(@, Nacl.h2(@_gPk guest), encMsg)\n\n  # Downloads pending relay messages into @lastDownload\n  relayMessages: ->\n    throw new Error('relayMessages - no open relay') unless @lastRelay\n    @lastRelay.download(@).then =>\n      @lastDownload = []\n      for emsg in @lastRelay.result\n        if (tag = @keyRing.tagByHpk emsg.from)\n          emsg['fromTag'] = tag\n          emsg['msg'] = @decodeMessage tag, emsg.nonce, emsg.data\n          delete emsg.data if emsg['msg']?\n        @lastDownload.push emsg\n\n  # If @downloadMeta has been populated by previous calls, this maps the list\n  # of nonces of current messages on the relay. Since nonces are forced to be\n  # unique, they are used as global message ids for a given mailbox\n  relayNonceList: ->\n    throw new Error('relayNonceList - no metadata') unless @lastDownload\n    Utils.map @lastDownload, (i) -> i.nonce\n\n  # Deletes messages from the relay given a list of message nonces.\n  relayDelete: (list) ->\n    throw new Error('relayDelete - no open relay') unless @lastRelay\n    @lastRelay.delete(@, list)\n\n  # Calls @relayDelete @relayNonceList: deletes up to the first 100 messages\n  # from the relay for a given mailbox.\n  clean: (r) ->\n    @getRelayMessages(r).then =>\n      @relayDelete(@relayNonceList())\n\n  # Deletes a Mailbox and all its data from local CryptoStorage. This is a very\n  # destructive operation, use with caution - it will also delete the Mailbox\n  # keyring along with all stored public keys. To restore that information, you\n  # will need to do another key exchange with all the guests on your keyring.\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    @keyRing.selfDestruct(overseerAuthorized)\n\n  # --- Protected helpers ---\n\n  # Get a guest key pair by id\n  _gKey: (strId) ->\n    return null unless strId\n    @keyRing.getGuestKey strId\n\n  # Get a guest public key by id\n  _gPk: (strId) ->\n    return null unless strId\n    @_gKey(strId)?.boxPk\n\n  _gHpk: (strId) ->\n    return null unless strId\n    Nacl.h2 @_gPk strId\n\n  _getSecretKey: (guest, session, skTag) ->\n    unless skTag\n      return if session then @sessionKeys[guest].boxSk else @keyRing.commKey.boxSk\n    else\n      # In this case we use the key ring to store temp secret keys\n      return @_gPk skTag\n\n  # Converts any object into Uint8Array\n  _parseData: (data) ->\n    return data if Utils.type(data) is 'Uint8Array'\n    Nacl.use().encode_utf8 JSON.stringify data\n\n  # Makes a timestamp nonce that a relay expects for any crypto operations.\n  # timestamp is the first 8 bytes, the rest is random\n  _makeNonce: (time = parseInt(Date.now() / 1000)) ->\n    nonce = Nacl.use().crypto_box_random_nonce()\n    throw new Error('RNG failed, try again?') unless nonce? and nonce.length is 24\n\n    # split timestamp integer as an array of bytes\n    bytes = Utils.itoa time\n\n    # copy the timestamp into the first 8 bytes of nonce\n    nonce[i] = 0 for i in [0..7]\n    nonce[8 - bytes.length + i] = bytes[i] for i in [0..(bytes.length - 1)]\n    return nonce\n\nmodule.exports = MailBox\nwindow.MailBox = MailBox if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nmodule.exports =\n  Utils:                require 'utils'\n  Mixins:               require 'mixins'\n  Nacl:                 require 'nacl'\n  Keys:                 require 'keys'\n  SimpleStorageDriver:  require 'test_driver'\n  CryptoStorage:        require 'crypto_storage'\n  KeyRing:              require 'keyring'\n  MailBox:              require 'mailbox'\n  Relay:                require 'relay'\n  RachetBox:            require 'rachetbox'\n  Config:               require 'config'\n\n  # storeImpl required API:\n  # - get(key: String): Object\n  # - set(key: String, value: Object): Void\n  # - remove(key: String): Void\n\n  startStorageSystem: (storeImpl) ->\n    @CryptoStorage.startStorageSystem storeImpl\n\n  # ajaxImpl required API:\n  # - ajax( url: String, data: String ): Promise\n  #   Promise: resolved with text/plain response\n  #   method: POST\n  #   contentType: 'text/plain'\n  #   dataType: 'text'\n\n  setAjaxImpl: (ajaxImpl)->\n    @Utils.setAjaxImpl ajaxImpl\n\n# export glow in browser\nif window\n  window.glow = module.exports\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Extends several low level data types with utility functions\nUtils = require 'utils'\n\n# --- Extending functions of String class ---\nUtils.include String,\n  # string to an array of byte values\n  toCodeArray: ->\n    (s.charCodeAt() for s in @)\n\n  # UTF8 conversions\n  toUTF8: ->\n    unescape encodeURIComponent @\n  fromUTF8: ->\n    decodeURIComponent escape @\n\n  # Each char code to a Uint8Array\n  toUint8Array: ->\n    new Uint8Array @.toUTF8().toCodeArray()\n\n  toUint8ArrayRaw: ->\n    new Uint8Array @.toCodeArray()\n\n  # From base64 string to Uint8Array\n  fromBase64: ->\n    new Uint8Array (atob @).toCodeArray()\n\n  # Trim line feed chars\n  trimLines: ->\n    @.replace('\\r\\n', '').replace('\\n', '').replace('\\r', '')\n# ---\n\n# --- Extending functions of Array , Uint8Array , Uint16Array classes ---\nfor C in [Array , Uint8Array , Uint16Array]\n  Utils.include C,\n    # From JS arrays of char codes to a string\n    # UTF16 chars above ASCII will generate codes above 255\n    fromCharCodes: ->\n      (String.fromCharCode(c) for c in @).join('')\n\n    # From array of char codes to a base64 string\n    toBase64: ->\n      btoa @fromCharCodes()\n\n    xorWith: (a) ->\n      return null unless @.length is a.length\n      new Uint8Array(c ^ a[i] for c, i in @)\n\n    equal: (a2) ->\n      return false if @.length isnt a2.length\n      for v,i in @\n        return false if v isnt a2[i]\n      return true\n\nUtils.include Uint8Array,\n  # creates a new Uint8Array that is the concat of self & anotherArray\n  concat: (anotherArray) ->\n    tmp = new Uint8Array(@byteLength + anotherArray.byteLength)\n    tmp.set(new Uint8Array(@), 0)\n    tmp.set(anotherArray, @byteLength)\n    return tmp\n\n  # .fill() for setting the whole array to a particular value\n  fillWith: (val) ->\n    for v, i in @\n      @[i] = val\n    @ # allows call chaining\n# --- end mixins ---\n\nmodule.exports = {} # Nothing to export\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# A light wrapper around the js-nacl library\n\n# If we are running in the browser, then nacl_factory will be defined by\n# including the nacl_factory.js lib before including glow. If we are on node,\n# then require 'js-nacl' will include nacl_factory appropriately\nif nacl_factory?\n  js_nacl = nacl_factory\nelse\n  js_nacl  = require 'js-nacl' # https://github.com/tonyg/js-nacl\n\nKeys          = require 'keys'\nUtils         = require 'utils'\n\nclass Nacl\n  @HEAP_SIZE:     2 ** 23\n  @_instance:     null\n  @_unloadTimer:  null\n\n  # whenever we call use, we're accessing the js-nacl lib for a function call\n  # if we haven't used any js-nacl lib function calls in 15 seconds, then it\n  # unloads via the unload call\n  @use: ->\n    # timer unloads 8mb heap 15 sec after last use\n    clearTimeout @_unloadTimer if @_unloadTimer\n    @_unloadTimer = setTimeout((-> Nacl.unload()), 15 * 1000)\n\n    unless window.__naclInstance   # Global instance to avoid duplicating heap\n      window.__naclInstance = js_nacl.instantiate(@HEAP_SIZE) # 8mb heap\n    window.__naclInstance\n\n  @unload: ->\n    # Nacl hasn't been used in 15 seconds, unload it and free the heap\n    @_unloadTimer = null\n    window.__naclInstance = null\n    delete window.__naclInstance\n\n  @makeSecretKey: ->\n    new Keys(\n      key: @use().random_bytes(@use().crypto_secretbox_KEYBYTES)\n    )\n\n  @random: (size = 32) ->\n    @use().random_bytes(size)\n\n  @makeKeyPair: ->\n    new Keys @use().crypto_box_keypair()\n\n  @fromSecretKey: (raw_sk) ->\n    new Keys @use().crypto_box_keypair_from_raw_sk(raw_sk)\n\n  @fromSeed: (seed) ->\n    new Keys @use().crypto_box_keypair_from_seed(seed)\n\n  @sha256: (data) ->\n    @use().crypto_hash_sha256 data\n\n  @to_hex: (data) ->\n    @use().to_hex data\n\n  @from_hex: (data) ->\n    @use().from_hex data\n\n  @encode_utf8: (data) ->\n    @use().encode_utf8 data\n\n  @decode_utf8: (data) ->\n    @use().decode_utf8 data\n\n  # h2(m) = sha256(sha256(32x0 + m))\n  # Zero out initial sha256 block, and double hash 0-padded message\n  # http://cs.nyu.edu/~dodis/ps/h-of-h.pdf\n  @h2: (str) ->\n    str = str.toUint8ArrayRaw() if Utils.type(str) is 'String'\n    tmp = new Uint8Array(32 + str.length)\n    tmp.fillWith 0\n    tmp.set(str, 32)\n    @sha256 @sha256 tmp\n\n  @h2_64: (b64str) ->\n    Nacl.h2(b64str.fromBase64()).toBase64()\n\nmodule.exports = Nacl\nwindow.Nacl = Nacl if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nUtils       = require 'utils'\nNacl        = require 'nacl'\nKeys        = require 'keys'\nKeyRing     = require 'keyring'\nKeyRatchet  = require 'keyratchet'\nMailbox     = require 'mailbox'\n\n# RatchetBox is a prototype to show a simple ratcheting schema implementation via Glow.\n# By overload relay_send and relay_messages we can introduce a key ratchet between\n# mailbox and its guests. All payload messages (object trees) are delivered along with\n# system field 'next_key' that contains next public key in the ratchet. The guest \n# confirm key with system field 'got_key'. Any message to guest or from guest advances\n# the ratchet to next_key from that side. \n#\n# TODO: provision for loss of messages by introducing 'reset' field - mailboxes\n# can singnal they dont have key material to decrypt laste message. That will revert\n# ratchet to long term idenitiy key and will cause the start of new key chain.\nclass RatchetBox extends Mailbox\n\n  _loadRatchets: (guest) ->\n    # every guest will have a next confirmed key that we can reliably use, and\n    # a next key we are awaiting confirmation for. In local storage we will\n    # reference guests by the usual guest hpk=h2(pk)\n    gHpk = @_gHpk(guest).toBase64()\n\n    # if we have confirmed ratchet key we use it, otherwise\n    # fallback to our @commKey\n    @krLocal = new KeyRatchet(\"local_#{gHpk}_for_#{@hpk().toBase64()}\",\n      @keyRing, @keyRing.commKey)\n\n    @krGuest = new KeyRatchet(\"guest_#{gHpk}_for_#{@hpk().toBase64()}\",\n      @keyRing, @keyRing.getGuestKey guest)\n\n  relaySend: (guest, m) ->\n    throw new Error('rbx: relaySend - no open relay') unless @lastRelay\n    throw new Error('rbx: relaySend - missing params') unless guest and m\n\n    # now we have 2 keys - the next key to send to a guest, and the last\n    # confirmed key we can use for encryption - it may be the comm identity key\n    # if we are at the start of a ratchet\n    @_loadRatchets(guest)\n\n    # Save original message and include ratchet information along\n    msg = {org_msg: m}\n    # Add next key to org_msg unless its a key confirmation message\n    msg['nextKey'] = @krLocal.nextKey.strPubKey() unless m.got_key?\n\n    # Full message or just a 'got_key' confirmation?\n    if not m.got_key?\n      # Use the confirmed ratchet key we got from the guest, or it will default\n      # to her public commKey\n      encMsg = @rawEncodeMessage(msg, @krGuest.confirmedKey.boxPk, @krLocal.confirmedKey.boxSk)\n      @lastMsg = encMsg\n    else\n      # sending key confirmation using last key\n      encMsg = @rawEncodeMessage(msg, @krGuest.lastKey.boxPk, @krLocal.confirmedKey.boxSk)\n\n    # console.log \"sent #{@getPubCommKey()} => #{@_gPk(guest).toBase64()} with #{@krGuest.confirmedKey.boxPk.toBase64()} | nonce = #{encMsg.nonce}\"\n    @lastRelay.upload(@, Nacl.h2(@_gPk guest), encMsg)\n\n  _tryKeypair: (nonce, ctext, pk, sk) ->\n    try\n      return @rawDecodeMessage nonce.fromBase64(),\n        ctext.fromBase64(), pk, sk\n    catch e\n      return null\n\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    return super(guest, nonce, ctext, session, skTag) if session\n    throw new Error('decodeMessage: missing params') unless guest? and nonce? and ctext?\n    @_loadRatchets(guest)\n    # console.log \"receiving from #{@_gPk(guest).toBase64()} => #{@getPubCommKey()} with #{@krGuest.confirmedKey.boxPk.toBase64()}\"\n\n    keyPairs = [\n      # defult: confirmed local and guest\n      [@krGuest.confirmedKey.boxPk, @krLocal.confirmedKey.boxSk],\n\n      # Guest might not have switched to latest key yet\n      [@krGuest.lastKey.boxPk, @krLocal.lastKey.boxSk],\n      [@krGuest.confirmedKey.boxPk, @krLocal.lastKey.boxSk],\n      [@krGuest.lastKey.boxPk, @krLocal.confirmedKey.boxSk]]\n\n    for kp, i in keyPairs\n      # console.log \"key pair #{i}\" if i>0\n      r = @_tryKeypair nonce, ctext, kp[0], kp[1]\n      return r if r?\n\n    console.log 'RatchetBox decryption failed: message from unknown guest or ratchet out of sync'\n    # TODO: Add ratchet key reset protocol for this guest here (send \"reset\" command)\n    return null\n\n  relayMessages: ->\n    # First download pending messages\n    super().then =>\n      # Now, lets process ratchet-related information in these messages\n      sendConfs = []\n\n      for m in @lastDownload\n        continue unless m.fromTag\n\n        @_loadRatchets(m.fromTag)\n\n        # If guests send use their nextKey for ratchet\n        if m.msg?.nextKey?\n          # save nextKey for that guest\n          if @krGuest.confKey new Keys {boxPk: m.msg.nextKey.fromBase64()}\n            # send guest confirmation that we got it\n            sendConfs.push\n              toTag: m.fromTag\n              key: m.msg.nextKey\n              msg:\n                got_key: Nacl.h2_64(m.msg.nextKey)\n\n        # If we got confirmation that our key is received\n        # we should move it to nextKey for that guest\n\n        if m.msg?.org_msg?.got_key?\n          m.msg = m.msg.org_msg\n          # do we saved that key locally?\n          if @krLocal.isNextKeyHash m.msg.got_key.fromBase64()\n            @krLocal.pushKey Nacl.makeKeyPair()\n          m.msg = null\n          # we processed it, nothing else to do with this message\n\n        # restore usual @lastDownload structure\n        if m.msg?\n          m.msg = m.msg.org_msg\n\n      # now we can send confirmations to guests that we got their key. Note\n      # that got_key is a service message that wont advance the ratchet\n      sendNext = =>\n        if sendConfs.length > 0\n          sc = sendConfs.shift()\n          @relaySend(sc.toTag,sc.msg).then =>\n            sendNext()\n      sendNext()\n\n  selfDestruct: (overseerAuthorized, withRatchet = false) ->\n    return unless overseerAuthorized\n    if withRatchet\n      for guest in @keyRing.registry\n        @_loadRatchets(guest)\n        @krLocal.selfDestruct(withRatchet)\n        @krGuest.selfDestruct(withRatchet)\n    super(overseerAuthorized)\n\nmodule.exports = RatchetBox\nwindow.RatchetBox = RatchetBox if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig = require 'config'\nKeys = require 'keys'\nNacl = require 'nacl'\nUtils = require 'utils'\n\nclass Relay\n  # skip url for offline testing\n  constructor: (@url = null) ->\n    @_resetState() # until a succesful handshake\n    @lastError = null\n\n    # plugins can add their own commands to specific relays\n    @RELAY_COMMANDS = ['count', 'upload', 'download', 'delete']\n\n  openConnection: ->\n    # exchange tokens with a relay and get a temp session key for this relay\n    @getServerToken().then =>\n      @getServerKey()\n\n  getServerToken: ->\n    throw new Error('getServerToken - no url') unless @url\n    @lastError = null\n\n    # Generate a clientToken. It will be used as part of handshake id with relay\n    @clientToken = Nacl.random(Config.RELAY_TOKEN_LEN) unless @clientToken\n\n    # sanity check the client token\n    if @clientToken and @clientToken.length isnt Config.RELAY_TOKEN_LEN\n      throw new Error(\"Token must be #{Config.RELAY_TOKEN_LEN} bytes\")\n\n    @_ajax('start_session', @clientToken.toBase64()).then (data) =>\n      # relay responds with its own counter token. Until session is\n      # established these 2 tokens are handshake id.\n      lines = @_processData data\n      @relayToken = lines[0].fromBase64()\n      @diff = if lines.length is 2 then parseInt(lines[1]) else 0\n\n      @_scheduleExpireSession Config.RELAY_TOKEN_TIMEOUT\n      # Will remove after token expires on relay\n      if @diff > 4\n        console.log \"Relay #{@url} requested difficulty #{@diff}. Session handshake may take longer.\"\n      if @diff > 16\n        console.log \"Attempting handshake at difficulty #{@diff}! This may take a while\"\n\n  getServerKey: ->\n    throw new Error('getServerKey - missing params') unless @url and @clientToken and @relayToken\n    @lastError = null\n\n    # After the clientToken is sent to reley, we use only the h2() of it\n    @h2ClientToken = Nacl.h2(@clientToken).toBase64()\n\n    handshake = @clientToken.concat @relayToken\n    if @diff is 0\n      sessionHandshake = Nacl.h2(handshake).toBase64()\n    else\n      nonce = Nacl.random 32\n      until Utils.arrayZeroBits(Nacl.h2(handshake.concat nonce), @diff)\n        nonce = Nacl.random 32\n      sessionHandshake = nonce.toBase64()\n\n    # We confirm handshake by sending back h2(clientToken, relay_token)\n    @_ajax('verify_session', \"#{@h2ClientToken}\\r\\n#{sessionHandshake}\\r\\n\").then (d) =>\n      # relay gives us back temp session key\n      # masked by clientToken we started with\n      relayPk = d.fromBase64()\n      @relayKey = new Keys { boxPk: relayPk }\n      @online = true\n      # @_scheduleExpireSession Config.RELAY_SESSION_TIMEOUT\n      # Will remove after the key expires on this relay\n\n  connectMailbox: (mbx) ->\n    throw new Error('connectMailbox - missing params') unless mbx? and @online and @relayKey? and @url?\n    @lastError = null\n\n    relayId = \"relay_#{@url}\"\n    clientTemp = mbx.createSessionKey(relayId).boxPk\n    mbx.keyRing.addTempGuest relayId, @relayKey.strPubKey()\n    delete @relayKey # now it belongs to the mailbox\n\n    maskedClientTempPk = clientTemp.toBase64()\n\n    # Alice creates a 32 byte session signature as\n    # h₂(a_temp_pk,relay_token, clientToken)\n    sign = clientTemp.concat(@relayToken).concat(@clientToken)\n    h2Sign = Nacl.h2(sign)\n\n    inner = mbx.encodeMessage relayId, h2Sign\n    inner['pub_key'] = mbx.keyRing.getPubCommKey()\n    outer = mbx.encodeMessage \"relay_#{@url}\", inner, true\n\n    @_ajax('prove',\n      \"#{@h2ClientToken}\\r\\n\" +\n      \"#{maskedClientTempPk}\\r\\n\" +\n      \"#{outer.nonce}\\r\\n\" +\n      \"#{outer.ctext}\")\n    .then (d)=>\n      # console.log \"#{@url} => #{d} messages\"\n\n  runCmd: (cmd, mbx, params = null) ->\n    throw new Error('runCmd - missing params') unless cmd? and mbx?\n    unless cmd in @RELAY_COMMANDS\n      throw new Error(\"Relay #{@url} doesn't support #{cmd}\")\n    data =\n      cmd: cmd\n    data = Utils.extend data, params if params\n    message = mbx.encodeMessage \"relay_#{@url}\", data, true\n\n    @_ajax('command',\n      \"#{mbx.hpk().toBase64()}\\r\\n\" +\n      \"#{message.nonce}\\r\\n\" +\n      \"#{message.ctext}\")\n    .then (d)=>\n      return if cmd in ['upload'] # no data in the response\n      throw new Error(\"#{@url} - #{cmd} error\") unless d?\n      if cmd in ['count','download']\n        @result = @_processResponse(d, mbx, cmd)\n      else\n        @result = JSON.parse d\n\n  _processResponse: (d, mbx, cmd) ->\n    datain = @_processData d\n    unless datain.length is 2\n      throw new Error(\"#{@url} - #{cmd}: Bad response\")\n    nonce = datain[0]\n    ctext = datain[1]\n    mbx.decodeMessage(\"relay_#{@url}\", nonce, ctext, true)\n\n  _processData: (d) ->\n    datain = d.split('\\r\\n')\n    datain = d.split('\\n') unless datain.length >= 2\n    return datain\n\n  # Command wrappers\n\n  count: (mbx) ->\n    @runCmd('count', mbx)\n\n  upload: (mbx, toHpk, payload) ->\n    @runCmd('upload', mbx,\n      to: toHpk.toBase64()\n      payload: payload)\n\n  download: (mbx) ->\n    @runCmd('download', mbx)\n\n  delete: (mbx, nonceList) ->\n    @runCmd('delete', mbx,\n      payload: nonceList)\n\n  # Deletes all local session tokens\n  # Our information has expired on the relay and a new session has to be\n  # established with all new tokens\n  _resetState: ->\n    @clientToken = null\n    @online = false\n    @relayToken = null\n    @relayKey = null\n    @clientTokenExpiration = null\n\n  _scheduleExpireSession: (tout) ->\n    clearTimeout(@clientTokenExpiration) if @clientTokenExpiration\n    @clientTokenExpiration = setTimeout( =>\n      @_resetState()\n    , tout) # Token will expire on the relay\n\n  _ajax: (cmd, data) =>\n    Utils.ajax \"#{@url}/#{cmd}\", data\n    # TODO update for various implementations or make them provide it extra:\n    # .catch e\n    #   console.error @lastError = \"#{type}/#{xhr.status} - #{error}\"\n    #   @online = false\n    #   throw e\n\nmodule.exports = Relay\nwindow.Relay = Relay if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# A test driver - not to be used in production for permanent key storage\nclass SimpleTestDriver\n\n  _state: null\n  _key_tag: (key) -> \"#{@_root_tag}.#{key}\"\n\n  constructor: (root = 'storage.', sourceData = null) ->\n    @_root_tag = \"__glow.#{root}\" # + root\n    @_load(sourceData)\n\n  get: (key) ->\n    @_load() if not @_state\n    if @_state[key] then @_state[key] else JSON.parse localStorage.getItem @_key_tag key\n\n  set: (key, value) ->\n    @_load() if not @_state\n    @_state[key] = value\n    localStorage.setItem @_key_tag(key), JSON.stringify value\n    @_persist()\n\n  remove: (key) ->\n    @_load() if not @_state\n    delete @_state[key]\n    localStorage.removeItem @_key_tag key\n    @_persist()\n\n  _persist: () ->\n    # Permanently save the state object in a real driver\n    # _state.save()\n\n  _load: (sourceData = null) ->\n    # Load from persitent app storage in the real driver\n    @_state = if sourceData then sourceData else {}\n    console.log 'INFO: SimpleTestDriver uses localStorage and should not be\n      used in production for permanent key storage.'\n\nmodule.exports = SimpleTestDriver\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Low level basic utilities and mixins\n# zepto = require 'zepto' # minimalist js library. similar syntax to jQuery\nConfig = require 'config'\n\nclass Utils\n  # --- Mixins ---\n  # Wraps http://zeptojs.com/#$.extend - provided so that you can swap\n  # zepto for another js library that doesn't have the same extend behavior.\n  # Uses default impl if $.extend not available.\n  @extend = (target, source) ->\n    if $?.extend\n      $.extend target, source\n    else\n      for key, val of source\n        if source[key] isnt undefined\n          target[key] = source[key]\n      target\n\n  @map = (array, func) ->\n    if $?.map\n      $?.map array, func\n    else\n      # http://caniuse.com/#search=map\n      Array::map.apply array, [ func ]\n\n  # convenience function for extending an object by class\n  @include = (klass, mixin) ->\n    @extend klass.prototype, mixin\n\n  # extracts just the name portion as a string of an object's class\n  @type = (obj) ->\n    return 'undefined' if obj is undefined\n    return 'null' if obj is null\n    Object::toString.call(obj)\n      .replace('[', '').replace(']', '').split(' ')[1]\n\n  @ajaxImpl: null\n\n  @setAjaxImpl: (ajaxImpl)->\n    @ajaxImpl = ajaxImpl\n\n  # wraps http://zeptojs.com/#$.ajax - provided so that if you can swap\n  # zepto for another js library that doesn't have the same ajax behavior\n  @ajax: (url, data) ->\n\n    # no ajax impl set?\n    if @ajaxImpl is null\n      # try to auto-set some default implementations here, if present\n\n      # set the impl to q-xhr if present\n      if Q?.xhr\n        # console.log 'default ajax impl: setting to q-xhr'\n        @setAjaxImpl (url, data)->\n          Q.xhr\n            method: 'POST'\n            url: url\n            headers:\n              'Accept': 'text/plain'\n              'Content-Type': 'text/plain'\n            data: data\n            responseType: 'text'\n            timeout: Config.RELAY_AJAX_TIMEOUT\n            disableUploadProgress: true # https://github.com/nathanboktae/q-xhr/issues/12\n          .then (response)->\n            response.data\n\n      # try Zepto with Promises (will not catch exceptions in .then/.done)\n      else if $?.ajax && $?.Deferred\n        console.log 'default ajax impl: setting to zepto with promises'\n        @setAjaxImpl (url, data)->\n          $.ajax\n            url: url\n            type: 'POST'\n            dataType: 'text'\n            timeout: Config.RELAY_AJAX_TIMEOUT\n            context: @\n            error: console.log\n            contentType: 'text/plain'\n            data: data\n\n      else\n        throw new Error 'ajax implementation not set; use q-xhr or $http'\n\n    # invoke ajax\n    @ajaxImpl url, data\n\n  # calls func after the specified delay in milliseconds\n  @delay: (milliseconds, func) ->\n    setTimeout(func, milliseconds)\n\n  # splits an integer into an array of bytes\n  @itoa: (n) ->\n    return new Uint8Array(0 for i in [0..7]) if n <= 0\n    [floor, pw, lg] = [Math.floor, Math.pow, Math.log] # aliases\n\n    top = floor lg(n) / lg(256)\n    new Uint8Array( floor(n / pw(256, i)) % 256 for i in [top..0] )\n\n  # returns true if the rightmost n bits of a byte are 0\n  @firstZeroBits: (byte, n) ->\n    byte is ((byte >> n) << n)\n\n  # check whether the rightmost difficulty bits of an Uint8Array are 0, where\n  # the lowest indexes of the array represent those rightmost bits. Thus if\n  # the difficulty is 17, then arr[0] and arr[1] should be 0, as should the\n  # rightmost bit of arr[2]. This is used for our difficulty settings in Zax to\n  # reduce burden on a busy server by ensuring clients have to do some\n  # additional work during the session handshake\n  @arrayZeroBits: (arr, diff) ->\n    rmd = diff\n    for i in [0..(1 + diff / 8)]\n      a = arr[i]\n      return true if rmd <= 0\n      if rmd > 8\n        rmd -= 8\n        return false if a > 0\n      else\n        return @firstZeroBits(a, rmd)\n    return false\n\n  # Prints a current stack trace to the console\n  @logStack: (err) ->\n    err = new Error('stackLog') unless err\n    s = err.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n    .replace(/^\\s+at\\s+/gm, '')\n    .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@')\n    .split('\\n')\n    console.log \"#{i}: #{sl}\" for sl, i in s\n\nmodule.exports = Utils\nwindow.Utils = Utils if window.__CRYPTO_DEBUG\n"],"sourceRoot":"/source/"}